<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【快速解决】conda 报错ValueError check_hostname requires server_hostname</title>
    <link href="/2022/11/20/%E3%80%90%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3%E3%80%91conda-%E6%8A%A5%E9%94%99ValueError/"/>
    <url>/2022/11/20/%E3%80%90%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3%E3%80%91conda-%E6%8A%A5%E9%94%99ValueError/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>我的环境：<ul><li>Anaconda 4.10.1</li><li>Win10</li></ul></li></ul><h2 id="快速解决"><a href="#快速解决" class="headerlink" title="快速解决"></a>快速解决</h2><p><img src="https://img-blog.csdnimg.cn/71c803243b62421b8895e9c65a7dce27.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16" alt="报错内容"></p><ul><li>根据报错信息可以判断出是网络连接问题，检查后是因为我设置了代理，只需要给conda也配置上代理即可</li><li>在 <code>C:\users\username\</code> 下找到并打开 <code>.condarc</code> 文件，文件可能隐藏，可以在文件资源管理器中设置查看-&gt;显示隐藏的文件<br>-<code>.condarc</code> 文件可能为空也可能有内容，只需要添加上如下语句:</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">proxy_servers: &#123;http: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:port, https: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:port&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：将 <code>port</code> 换成自己的端口，可以在Win10的设置代理中的手动设置部分找到。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Solutions</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Anaconda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse 快速创建运行 Javaweb 项目</title>
    <link href="/2022/11/20/Eclipse-%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E8%BF%90%E8%A1%8C-Javaweb-%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/11/20/Eclipse-%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E8%BF%90%E8%A1%8C-Javaweb-%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h2><ul><li>Eclipse IDE for Enterprise Java Developers.<ul><li>Version: 2020-03 (4.15.0)</li><li>Build id: 20200313-1211</li></ul></li><li>Tomcat<ul><li>Version: apache-tomcat-9.0.46</li></ul></li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul><li>选择 File -&gt; New -&gt; Dynamic Web Project</li></ul><p><img src="https://img-blog.csdnimg.cn/a9352cb6ece04477ad4c729a93a13c27.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>注意：有可能找不到 Dynamic Web Project 选项，可以进入 Other，在其中的 Web 文件夹中寻找到，如下图：</li></ul><p><img src="https://img-blog.csdnimg.cn/c9775232e5f449a0bc80abc49566d412.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/938f9b2b5396402c89f037a7da380581.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>填入项目名后可以直接点击 Finish，如果需要修改项目的目录结构可以点 Next 进行下一步设置</li></ul><p><img src="https://img-blog.csdnimg.cn/e464d7fac99a42c998146348503e72d6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>点击 Finish 后就会创建一个web项目</li></ul><p><img src="https://img-blog.csdnimg.cn/deace37901bb424cb80e72eac019c752.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><ul><li>首先配置运行环境，此处需要用到 Tomcat，(本教程默认已经安装 Tomcat 且可以正常上使用)</li><li>进入到 Window -&gt; Preferences -&gt; Server -&gt; Runtime Environments 在此处进行 eclipse 与本地 Tomcat 的关联，(默认应该没有tomcat配置，因为我已经配置过一次所以有配置好的一个运行环境)</li></ul><p><img src="https://img-blog.csdnimg.cn/bfb97d1c0892499caae927d9d7e32a09.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>点击 Add 按钮后，选择你对应的 Tomcat 版本，(由于我用的是 apache-tomcat-9.0.46, 此处选择 Tomcat v9.0，注意此 eclipse 版本没有 Tomcat v10.0 选项)，点击 Next</li></ul><p><img src="https://img-blog.csdnimg.cn/9d51d42bf27448db90f50443ee8439e5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>点击 Browse 选择 Tomcat 安装路径，切换 JRE，然后点击 Finish 即可完成运行环境的配置</li></ul><p><img src="https://img-blog.csdnimg.cn/a3b8a97cde2e4e0eb72e595ae2a3218d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h2><ul><li>右键 WebContent 新建一个 jsp 文件</li></ul><p><img src="https://img-blog.csdnimg.cn/d7f5dba6b4fe43ebbbf92689f13bc2cf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>编写测试代码</li></ul><p><img src="https://img-blog.csdnimg.cn/8be11a858220424f9e1112fa75551a8d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>可以直接点击顶部绿三角运行项目，项目将运行在 tomcat 上</li></ul><p><img src="https://img-blog.csdnimg.cn/02b3c7666fe443c18941f6351e725796.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>运行成功则出现如下界面</li></ul><p><img src="https://img-blog.csdnimg.cn/8bb5497d2661488b82418739bc645a65.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><ul><li>进入到 Window -&gt; Preferences -&gt; Server -&gt; Launching 界面可以设置Launching 的效果</li></ul><p><img src="https://img-blog.csdnimg.cn/68096efcf3c1478a99a527622d6e3e73.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li><strong>The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path</strong></li><li>解决办法</li><li>右击项目名 进入如下路径 点击 Configure Build Path</li></ul><p><img src="https://img-blog.csdnimg.cn/6cef1e6081d0455db5d8e7503302fc1d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>选择 Java Build Path，切换到 Libraries 标签页下，点击 ClassPath，然后点击 Add Library</li><li><a href="https://bbs.csdn.net/topics/392628907?list=10230532">Classpath 和 Modulepath 的区别</a>(本人暂时并不明白 Classpath 和 Modulepath 的区别，感兴趣的可以参考以上的文章)</li></ul><p><img src="https://img-blog.csdnimg.cn/b7d8e8ace2b44dcf98f676ec3c637cb7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>选择 Server Runtime</li></ul><p><img src="https://img-blog.csdnimg.cn/93bb59349e9f450da833d250767e4aa7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>选择配置好的 Tomcat，点击 Finish 即可解决(如果空白则表示 tomcat 配置失败)</li></ul><p><img src="https://img-blog.csdnimg.cn/4732000b6d5044ca8990aa6eff76bace.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Z6g5p2J,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Eclipse</tag>
      
      <tag>Java Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Electron-vue出现GET http://localhost:9080/__webpack_hmr net::ERR_ABORTED解决方案</title>
    <link href="/2022/11/20/Electron-vue%E5%87%BA%E7%8E%B0ERR-ABORTED%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2022/11/20/Electron-vue%E5%87%BA%E7%8E%B0ERR-ABORTED%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="使用版本"><a href="#使用版本" class="headerlink" title="使用版本"></a>使用版本</h2><ul><li>以下是我解决此问题时使用的electron和vue等的一些版本信息</li></ul><p><img src="https://img-blog.csdnimg.cn/b7cfc72382bd4247b81f8b269370a592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA6Z6g5p2J,size_61,color_FFFFFF,t_70,g_se,x_16" alt="版本信息"></p><ul><li>【附】经过测试 <code>electron</code> 的版本为 <code>13.1.4</code> 时也能解决</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>将项目下的 <code>.electron-vue/dev-runner.js</code> 文件打开</li><li>定位到第二个 <code>WebpackDevServer</code></li></ul><p><img src="https://img-blog.csdnimg.cn/af8cafd21fb9445589638684a5910140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA6Z6g5p2J,size_54,color_FFFFFF,t_70,g_se,x_16" alt="WebpackDevServer 位置图示"></p><ul><li>将第 <code>69</code> 行的注释打开</li></ul><p><img src="https://img-blog.csdnimg.cn/49e10e6c5247402482fa3ff064acf636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA6Z6g5p2J,size_39,color_FFFFFF,t_70,g_se,x_16" alt="69 行注释打开后图示"></p><ul><li>重启项目即可解决 <code>GET http://localhost:9080/__webpack_hmr net::ERR_ABORTED</code> 报红的问题</li></ul><h2 id="解决总结"><a href="#解决总结" class="headerlink" title="解决总结"></a>解决总结</h2><ul><li>感觉是因为之前 <code>app.use(hostMiddleware</code> 被注释，因此 <code>webpack-hot-middleware</code> 中间件未能被正常的加载而导致了热部署出现了问题。</li><li>当前对<code> webpack</code> 尚不了解，分析的有问题希望大佬指出。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Solutions</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序的授权和获取userInfo</title>
    <link href="/2022/11/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%88%E6%9D%83%E5%92%8C%E8%8E%B7%E5%8F%96userInfo/"/>
    <url>/2022/11/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%88%E6%9D%83%E5%92%8C%E8%8E%B7%E5%8F%96userInfo/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>小程序官方在2021年4月28日后修改了<code>wx.getUserInfo</code>函数，所以导致目前网上大部分的文章已经不适用于解决目前小程序授权和获取userInfo的问题，此问题也是困扰了我一整天，算是初步解决，但解决方式比较粗糙，日后知识完善了会进一步修改。</li></ul><h2 id="新的函数"><a href="#新的函数" class="headerlink" title="新的函数"></a>新的函数</h2><ul><li>我的授权是采用<code>wx.getUserProfile()</code>函数，此函数只能在用户操作时调用(重点)，因此配合以按钮进行，下面是我采取的一种做法。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;isShow&#125;&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;!hasUserInfo&#125;&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;headView&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;headImageView&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;headImage&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;cloud://cloud-hwh.636c-cloud-hwh-1302901969/头像.png&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;titleText&#x27;</span>&gt;</span>申请获取以下权限<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;contentText&#x27;</span>&gt;</span>获得你的公开信息(昵称,头像,手机等)<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;canIUseGetUserProfile&#125;&#125;&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;getUserProfile&quot;</span>&gt;</span> 允许授权 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>wxml和js设置的参数绑定(参数自行设置)，设置了一个按钮，并绑定了getUserProfile函数。</p></li><li><p>下面显示关于getUserProfile部分的js</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getUserProfile</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">// 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认</span><br>    <span class="hljs-comment">// 开发者妥善保管用户快速填写的头像昵称，避免重复弹窗</span><br>    wx.<span class="hljs-title function_">getUserProfile</span>(&#123;<br>      <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;完善个人资料&#x27;</span>, <span class="hljs-comment">// 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写</span><br>      <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">userInfo</span>)<br>        <span class="hljs-comment">//获取成功后将userInfo保存</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>          <span class="hljs-attr">userInfo</span>: res.<span class="hljs-property">userInfo</span>,<br>          <span class="hljs-attr">hasUserInfo</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span><br>        &#125;)<br>        <span class="hljs-comment">//将userInfo写入本地存储</span><br>        wx.<span class="hljs-title function_">setStorage</span>(&#123;<br>          <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;userInfo&quot;</span>,<br>          <span class="hljs-attr">data</span>: res.<span class="hljs-property">userInfo</span><br>        &#125;)<br>        <span class="hljs-comment">//调用获取本地存储的函数，将存储到本地的userInfo取出，存放到app.globalData.userInfo</span><br>        <span class="hljs-comment">//此处是为了将userInfo存到全局，以便其他页面使用</span><br>        app.<span class="hljs-title function_">getStorageUserInfo</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(app.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span>)<br>          <span class="hljs-keyword">if</span> (app.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span>) &#123;<br>            that.<span class="hljs-title function_">setData</span>(&#123;<br>              <span class="hljs-attr">userInfo</span>: app.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span>,<br>              <span class="hljs-attr">hasUserInfo</span>: <span class="hljs-literal">true</span><br>            &#125;)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(wx.<span class="hljs-property">getUserProfile</span>)<br>            <span class="hljs-keyword">if</span> (wx.<span class="hljs-property">getUserProfile</span>) &#123;<br>              that.<span class="hljs-title function_">setData</span>(&#123;<br>                <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">canIUseGetUserProfile</span>: <span class="hljs-literal">true</span><br>              &#125;)<br>            &#125;<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><ul><li>上面的代码实现授权和获取数据</li></ul><h2 id="解决重复授权"><a href="#解决重复授权" class="headerlink" title="解决重复授权"></a>解决重复授权</h2><ul><li>为了让已授权的用户在使用时无需重复授权，在app.js中使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getStorageUserInfo</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">//进入页面获取是否授权----------------------------</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>      wx.<span class="hljs-title function_">getSetting</span>(&#123;<br>        <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<span class="hljs-comment">//authSetting用户授权结果</span><br>          <span class="hljs-comment">//scope.userInfo</span><br>          <span class="hljs-keyword">if</span> (res.<span class="hljs-property">authSetting</span>[<span class="hljs-string">&#x27;scope.userInfo&#x27;</span>]) &#123;<span class="hljs-comment">//授权过</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;授权过信息&#x27;</span>);<br>            <span class="hljs-comment">//获取本地存储中的userInfo</span><br>            <span class="hljs-keyword">let</span> userInfo = wx.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;userInfo&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userInfo)<br>            <span class="hljs-comment">//判断是否存在useInfo，如果存在则存储到globalData.userInfo中</span><br>            <span class="hljs-keyword">if</span> (userInfo != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>              that.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span> = userInfo<br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(that.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span>)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;没有授权&#x27;</span>)<br>          &#125;<br>          <span class="hljs-comment">//对执行成功的数据传送</span><br>          <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;调用成功&quot;</span>)<br>        &#125;<br>      &#125;)<br>    &#125;)<br><br>  &#125;,<br>  <span class="hljs-attr">globalData</span>: &#123;<br>    <span class="hljs-attr">userInfo</span>: <span class="hljs-literal">null</span><br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="无法使用wx-getUserInfo或者wx-getUserProfile获取userInfo"><a href="#无法使用wx-getUserInfo或者wx-getUserProfile获取userInfo" class="headerlink" title="无法使用wx.getUserInfo或者wx.getUserProfile获取userInfo"></a>无法使用<code>wx.getUserInfo</code>或者<code>wx.getUserProfile</code>获取userInfo</h3><ul><li><p><code>wx.getUserInfo()</code>仅能获取到匿名数据，这是在官方修改函数后导致的。</p></li><li><p>我采用将userInfo数据存入本地，每个小程序允许有10M的本地存储，用来解决<code>wx.getUserProfile()</code>函数只能在用户操作下调用(前面有讲过)，在js中无法直接调用的问题。</p></li><li><p>小程序的本地数据存取可以参考下面的文章</p></li></ul><blockquote><p><a href="https://www.cnblogs.com/pp8080/p/12019757.html">微信小程序中怎么存setStorage - 酷爱。 - 博客园</a></p></blockquote><h3 id="执行顺序问题"><a href="#执行顺序问题" class="headerlink" title="执行顺序问题"></a>执行顺序问题</h3><ul><li><p>由于默认情况下主页面的onLoad函数要比app.js中的onLaunch函数先执行，所以在app.js中直接调用此函数无法实现判断用户是否需要授权，因此需要让onLoad函数中的操作在getStorageUserInfo函数之后执行(此函数在上面也有使用)</p></li><li><p>此处我采用Promise写法以解决这个问题(Promise写法可以参考下面的文章)</p></li></ul><blockquote><p><a href="https://blog.csdn.net/u012693479/article/details/98214802">小程序 ES6 Promise用法讲解_u012693479的博客-CSDN博客_小程序promise详解</a></p></blockquote><ul><li>下面看onLoad函数中的调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>;<br>   <span class="hljs-comment">//在此处调用getStorageUserInfo,在执行后执行原本的操作</span><br>   app.<span class="hljs-title function_">getStorageUserInfo</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(app.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span>)<br>     <span class="hljs-comment">//判断globalData.userInfo是否为空</span><br>     <span class="hljs-comment">//注意如果直接在app.js中调用，每次进入小程序时globalData.userInfo将一直为空，因为此处先于app.js执行</span><br>     <span class="hljs-keyword">if</span> (app.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span>) &#123;<br>       that.<span class="hljs-title function_">setData</span>(&#123;<br>         <span class="hljs-attr">userInfo</span>: app.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span>,<br>         <span class="hljs-attr">hasUserInfo</span>: <span class="hljs-literal">true</span><br>       &#125;)<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(wx.<span class="hljs-property">getUserProfile</span>)<br>       <span class="hljs-comment">//获取授权和userInfo</span><br>       <span class="hljs-keyword">if</span> (wx.<span class="hljs-property">getUserProfile</span>) &#123;<br>         that.<span class="hljs-title function_">setData</span>(&#123;<br>           <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span>,<br>           <span class="hljs-attr">canIUseGetUserProfile</span>: <span class="hljs-literal">true</span><br>         &#125;)<br>       &#125;<br>     &#125;<br>   &#125;)<br></code></pre></td></tr></table></figure><ul><li><code>app</code>是在全局添加<code>var app = getApp()</code>而来的，这样使得在其他界面可以使用app.js中的全局变量和函数，即<code>globalData</code>和<code>getStorageUserInfo()</code>，使用方法可以参考这篇文章</li></ul><blockquote><p><a href="https://www.cnblogs.com/jiangtengteng/p/10531297.html">微信小程序 如何使用globalData - 姜腾腾 - 博客园</a></p></blockquote><ul><li>对于上面的问题还有两种办法可以解决，可以参考下面的文章</li></ul><blockquote><p><a href="https://www.cnblogs.com/shipskunkun/p/11802379.html">小程序Page里的函数比app.js先执行的解决办法 - shipskunkun - 博客园</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Solutions</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UserInfo</tag>
      
      <tag>Applet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create-electron-app安装配置</title>
    <link href="/2022/11/20/create-electron-app%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/11/20/create-electron-app%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>本文章分为三个部分<ul><li>Node.js安装配置</li><li>Git安装配置</li><li>安装create-electron-app</li></ul></li><li>如果已安装过Node.js和Git可适当跳过</li><li>Node.js的配置较为重要，确保按教程修改</li><li>遇到一切问题请仔细分析报错</li><li>确保修改环境变量时所填路径无误</li></ul><h2 id="Node-js安装配置"><a href="#Node-js安装配置" class="headerlink" title="Node.js安装配置"></a>Node.js安装配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><p><a href="https://nodejs.org/en/">官网</a>下载node.js不建议使用最新版本</p></li><li><p>需要安装其他版本的可以访问，<a href="https://nodejs.org/download/release/">node.js其他版本</a></p></li><li><p>根据自己的系统选择对应的版本，此处以<code>v14.17.0</code>为例</p></li><li><p>下载<a href="https://nodejs.org/download/release/v14.17.0/node-v14.17.0-x64.msi">node-v14.17.0-x64.msi</a></p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>运行<code>.msi</code>文件，除了修改安装路径，均点击下一步</p></li><li><p>安装完成后打开<code>cmd</code></p></li><li><p>执行<code>node -v</code>，如果正确显示版本则安装成功</p></li><li><p>执行<code>npm -v</code> ，如果正确显示版本则安装成功</p></li><li><p>如果安装路径为C盘，注意<code>cmd</code>用管理员身份打开</p></li><li><p>如果执行上面命令出错，检查环境变量是否正确。</p></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置npm安装全局模块和缓存路径"><a href="#配置npm安装全局模块和缓存路径" class="headerlink" title="配置npm安装全局模块和缓存路径"></a>配置npm安装全局模块和缓存路径</h4><ul><li><p>在node.js的安装目录下新建两个文件夹 node_global和node_cache</p></li><li><p><code>cmd</code>执行<code>npm config set prefix &quot;D:\nodejs\node_global&quot;</code></p></li><li><p><code>cmd</code>执行<code>npm config set cache &quot;D:\nodejs\node_cache&quot;</code></p></li><li><p>执行成功后配置环境变量</p></li><li><p><strong>系统变量</strong>：新建系统变量，变量名<code>NODE_PATH</code>，变量值<code>D:\nodejs\node_modules</code></p></li><li><p><strong>用户变量</strong>：在Path中修改node的默认路径<code>C:\Users\users\AppData\Roaming\npm</code> 为<code>D:\nodejs\node_global</code></p></li><li><p><code>cmd</code>执行<code>npm install vue -g</code>，安装完成后查看<code>D:\nodejs\node_global\node_modules</code>路径下是否出现vue文件夹，出现则修改成功。</p></li><li><p>注意：上述要修改成的路径以自己的实际路径为准，关注<code>node_global</code>和<code>node_cache</code>即可。</p></li></ul><h4 id="修改npm镜像"><a href="#修改npm镜像" class="headerlink" title="修改npm镜像"></a>修改npm镜像</h4><ul><li><p><code>cmd</code>执行如下命令</p></li><li><p><code>npm config set ELECTRON_MIRROR http://npm.taobao.org/mirrors/electron/</code></p></li><li><p>修改环境变量，新建用户变量</p></li><li><p>变量名<code>ELECTRON_MIRROR</code>，变量值<code>http://npm.taobao.org/mirrors/electron/</code></p></li><li><p>重启<code>cmd</code></p></li></ul><hr><h2 id="Git安装配置"><a href="#Git安装配置" class="headerlink" title="Git安装配置"></a>Git安装配置</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><ul><li><p><a href="https://npm.taobao.org/mirrors/git-for-windows/">国内镜像</a>下载</p></li><li><p>此处以<code>v2.30.0</code>为例</p></li><li><p>下载<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.30.0.windows.1/Git-2.30.0-64-bit.exe">Git-2.30.0-64-bit.exe</a></p></li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul><li><p>运行<code>.exe</code>文件，除了修改安装路径，均点击下一步</p></li><li><p>安装完成后打开<code>cmd</code>执行<code>git --version</code></p></li><li><p>若未出现版本号，则检查系统环境变量</p></li></ul><hr><h2 id="安装create-electron-app"><a href="#安装create-electron-app" class="headerlink" title="安装create-electron-app"></a>安装create-electron-app</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ul><li><p>安装yarn，<code>cmd</code>执行<code>npm install yarn -g</code></p></li><li><p>安装create-electron-app，<code>cmd</code>执行<code>yarn global add create-electron-app</code></p></li><li><p>如果出现yarn不是可执行的命令，请检查环境变量的配置</p></li></ul><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><ul><li><p>create-electron-app将安装到<code>D:\nodejs\node_global\bin</code>目录下</p></li><li><p>用户变量的Path添加create-electron-app的安装目录，即添加<code>D:\nodejs\node_global\bin</code></p></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li><p>到希望安装的目录下打开<code>cmd</code></p></li><li><p>执行<code>create-electron-app test</code>，即创建名为test的项目</p></li><li><p>如果报有关node install.js的错误</p></li><li><p>进入项目的<code>node_modules\electron\</code>下，<code>cmd</code>执行<code>node install.js</code></p></li><li><p>上述执行完成无报错后，可在<code>test\</code>下执行<code>npm start</code>，启动项目</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java必考知识点整理</title>
    <link href="/2022/11/20/Java%E5%BF%85%E8%80%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <url>/2022/11/20/Java%E5%BF%85%E8%80%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>线程的生命周期包含5个阶段，包括：新建、就绪、运行、阻塞、死亡。</p><ul><li><p>新建：对象由Thread类或者子类声明并创建，此时对象拥有相应的内存空间和其他资源；</p></li><li><p>就绪：在对象调用线程的start()方法后，这时候线程处于等待CPU分配资源阶段;</p></li><li><p>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run方法定义了线程的操作和功能;</p></li><li><p>阻塞：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如sleep()、wait()之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用notify或者notifyAll()方法。唤醒的线程不会立刻执行run方法，它们要再次等待CPU分配资源进入运行状态;</p></li><li><p>死亡：如果线程正常执行完毕后或线程被提前强制性的终止或出现异常导致结束，那么线程就要被销毁，释放资源;</p></li></ul><h2 id="重载与覆盖"><a href="#重载与覆盖" class="headerlink" title="重载与覆盖"></a>重载与覆盖</h2><table><thead><tr><th align="center">区别</th><th align="center">覆盖</th><th align="center">重载</th></tr></thead><tbody><tr><td align="center">实现</td><td align="center">子类对父类方法的重写</td><td align="center">同一个类中建立多个同名方法</td></tr><tr><td align="center">参数</td><td align="center">与父类同名同参</td><td align="center">与别的方法同名不同参</td></tr><tr><td align="center">权限</td><td align="center">子类不能覆盖父类的private权限</td><td align="center">无</td></tr><tr><td align="center">返回值</td><td align="center">与父类方法一致</td><td align="center">无</td></tr></tbody></table><h3 id="发生重载的条件"><a href="#发生重载的条件" class="headerlink" title="发生重载的条件"></a>发生重载的条件</h3><ul><li>对于类的方法（包括从父类中继承的方法），方法名相同，参数列表不同的方法之间就构成了重载关系。这里有两个问题需要注意：</li></ul><ol><li>什么叫参数列表不同？是指三样东西：<strong>参数的类型，参数的个数，参数的顺序</strong>，这三者只要有一个不同就叫做参数列表不同。</li><li>重载关系只能发生在同一个类中吗？非也。这时候你要深刻理解继承，要知道一个子类所拥有的成员除了自己显式写出来的以外，还有父类遗传下来的。所以子类中的某个方法和父类中继承下来的方法也可以发生重载的关系。</li></ol><h3 id="发生覆盖的条件："><a href="#发生覆盖的条件：" class="headerlink" title="发生覆盖的条件："></a>发生覆盖的条件：</h3><ol><li><p><strong>“三同一不低”</strong> 子类和父类的<strong>方法名称，参数列表，返回类型</strong>必须<strong>完全相同</strong>，而且子类方法的访问修饰符的权限不能比父类低。</p></li><li><p>子类方法不能抛出比父类方法更多的异常。即子类方法所抛出的异常必须和父类方法所<strong>抛出的异常一致</strong>，或者是其子类什么也不抛出；</p></li><li><p>被覆盖的方法不能是<strong>final类型</strong>的。因为final修饰的方法是无法覆盖的。</p></li><li><p>被覆盖的方法不能为<strong>private</strong>。否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</p></li><li><p>被覆盖的方法不能为<strong>static</strong>。所以如果父类中的方法为静态的，而子类中的方法不是静态的，但是两个方法除了这一点外其他都满足覆盖条件，那么会发生编译错误。反之亦然。即使父类和子类中的方法都是静态的，并且满足覆盖条件，但是仍然不会发生覆盖，因为静态方法是在编译的时候把静态方法和类的引用类型进行匹配。</p></li></ol><h2 id="面向对象编程的基本特性"><a href="#面向对象编程的基本特性" class="headerlink" title="面向对象编程的基本特性"></a>面向对象编程的基本特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li>程序中的继承性是指子类拥有父类的全部特征和行为，这是类之间的一种关系。Java 只支持<strong>单继承</strong>。</li></ul><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><ul><li>封装是将<strong>代码及其处理的数据绑定在一起</strong>的一种编程机制，该机制保证了程序和数据都不受外部干扰且不被误用。封装的目的在于<strong>保护信息</strong>，使用它的主要优点如下。</li></ul><ol><li>保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。</li><li>隐藏细节信息，一些不需要程序员修改和使用的信息，比如取款机中的键盘，用户只需要知道按哪个键实现什么操作就可以，至于它内部是如何运行的，用户不需要知道。</li><li>有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。例如 U 盘，不管里面的存储方式怎么改变，只要 U 盘上的 USB 接口不变，就不会影响用户的正常操作。</li><li>提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用。例如，一个 U 盘可以在多台电脑上使用。</li></ol><ul><li>Java 语言的基本封装单位是<strong>类</strong>。由于类的用途是封装复杂性，所以类的内部有隐藏实现复杂性的机制。Java 提供了<strong>私有和公有</strong>的访问模式，类的公有接口代表外部的用户应该知道或可以知道的每件东西，私有的方法数据只能通过该类的成员代码来访问，这就可以确保不会发生不希望的事情。</li></ul><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><ul><li>面向对象的多态性，即“<strong>一个接口，多个方法</strong>”。多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。多态性允许一个接口被多个同类使用，弥补了单继承的不足。</li></ul><h2 id="面向抽象编程"><a href="#面向抽象编程" class="headerlink" title="面向抽象编程"></a>面向抽象编程</h2><ul><li>指当设计某种重要的类时，不让该类面向具体的类，而是面向抽象类，即设计类中的重要数据是抽象类声明的对象，而不是具体类声明的对象。</li></ul><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><ul><li>对扩展开放，对修改关闭。</li></ul><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>是解决两个或者多个线程同时访问同一个变量，并且至少有一个线程需要修改这个变量时，如何确保不发生冲突和混乱问题的办法。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3></li><li><p>给若干个线程需要同时调用的方法添加<code>synchronized</code>修饰，即对其进行加锁。<font color=red>注意:同时调用的方法内需要对变量具有修改操作，且此变量为共有的变量，即只有涉及到共公变量多线程修改的时候才需要加锁</font></p></li><li><p>补充了解<code>Lock</code>接口</p></li></ul><h3 id="牢记"><a href="#牢记" class="headerlink" title="牢记"></a>牢记</h3><ul><li>关于线程同步，需要牢牢记住的第一点是：线程同步就是线程排队。同步就是排队。线程同步的目的就是避免线程“同步”执行。这可真是个无聊的绕口令。</li><li>关于线程同步，需要牢牢记住的第二点是 “共享”这两个字。只有共享资源的读写访问才需要同步。如果不是共享资源，那么就根本没有同步的必要。</li><li>关于线程同步，需要牢牢记住的第三点是，只有“变量”才需要同步访问。如果共享的资源是固定不变的，那么就相当于“常量”，线程同时读取常量也不需要同步。至少一个线程修改共享资源，这样的情况下，线程之间就需要同步。</li><li>关于线程同步，需要牢牢记住的第四点是：多个线程访问共享资源的代码有可能是同一份代码，也有可能是不同的代码；无论是否执行同一份代码，只要这些线程的代码访问同一份可变的共享资源，这些线程之间就需要同步。</li></ul><blockquote><p>参考资料<br><a href="https://www.jianshu.com/p/6f98f03430eb">Java之多线程同步 - 简书</a></p><p><a href="https://www.cnblogs.com/findbetterme/p/10794410.html">Java中线程同步的理解 - FindBetterMe - 博客园</a></p></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p></li><li><p>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。</p></li><li><p>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</p></li><li><p>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</p></li></ul><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><h3 id="Java语言支持的变量类型有："><a href="#Java语言支持的变量类型有：" class="headerlink" title="Java语言支持的变量类型有："></a>Java语言支持的变量类型有：</h3><ul><li>类变量：独立于方法之外的变量，<strong>用 static 修饰</strong>。(又称静态成员变量)</li><li>实例变量：独立于方法之外的变量，不过<strong>没有 static 修饰</strong>。</li><li>局部变量：类的方法中的变量。</li></ul><h3 id="实例变量和类变量的区别"><a href="#实例变量和类变量的区别" class="headerlink" title="实例变量和类变量的区别"></a>实例变量和类变量的区别</h3><ul><li>不同对象的实例变量不同</li><li>所有对象共享类变量</li><li>通过类名直接访问类变量</li></ul><p><font color=red>注：类变量似乎破坏了分装性，其实不然，当对象调用实例方法时，该方法中出现的类变量也是该对象的变量，只不过这个变量和所有的其他对象共享而已。</font></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="三个常用类"><a href="#三个常用类" class="headerlink" title="三个常用类"></a>三个常用类</h3><p>java.util.regex 包主要包括以下三个类：</p><ul><li><p><strong>Pattern 类</strong>：<br>  pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p></li><li><p><strong>Matcher 类</strong>：<br>  Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p></li><li><p><strong>PatternSyntaxException</strong>：<br>  PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><h3 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h3><ul><li><p>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。<br>  例如，正则表达式 (123) 创建了单一分组，组里包含”1”，”2”，和”3”。</p></li><li><p>捕获组是通过从左至右计算其开括号来编号<br>  例如，正则表达式 ( A ( B ( C ) ) ),则分为( A (B( C ) ) ),( B ( C ) ),( C )<br>  <strong>计算心得</strong>：从左向右，依次根据<strong>左侧括号匹配右侧括号</strong>，则括号内的字符为一组。</p></li><li><p>可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。</p></li><li><p>还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。</p></li></ul><h3 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h3><ul><li><p>在其他语言中(Perl,JS,PHP,Python,Ruby等)，<code>\</code>表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。</p></li><li><p>在 Java 中，<code>\\</code> 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。<br><font color=red>注：在Java中需要两个</font><code>\\</code><font color=red>表示一个</font><code>\</code><font color=red>这与C++,Go类似。</font></p></li></ul><blockquote><p>参考资料<br><a href="https://www.runoob.com/java/java-regular-expressions.html">Java 正则表达式 | 菜鸟教程</a></p></blockquote><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//驱动程序名称</span><br><span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br><span class="hljs-comment">//加载驱动</span><br>Class.forName(driver);<br></code></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明Connection对象</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//URL指向要访问的数据库名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/javastudy(此处为自己的数据库名)?serverTimezone=UTC&quot;</span>;<br><span class="hljs-comment">//用户名</span><br>String user=<span class="hljs-string">&quot;xxx&quot;</span>;<br><span class="hljs-comment">//密码</span><br>String password=<span class="hljs-string">&quot;xxx&quot;</span>;<br><span class="hljs-comment">//getConnection()方法，连接MySQL数据库！！</span><br>con = DriverManager.getConnection(url, user, password);<br><span class="hljs-keyword">if</span> (!con.isClosed())<br>    System.out.println(<span class="hljs-string">&quot;Succeeded connecting to the Database!&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="创建查询"><a href="#创建查询" class="headerlink" title="创建查询"></a>创建查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建PreparedStatement对象执行sql语句</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> con.prepareStatement(<span class="hljs-string">&quot;select * from score where id = ?;&quot;</span>);<br><span class="hljs-comment">//给sql语句中的？赋值(从1开始依次往后)</span><br>statement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">//执行sql语句并返回结果集</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> statement.executeQuery();<br></code></pre></td></tr></table></figure><h3 id="处理结果集"><a href="#处理结果集" class="headerlink" title="处理结果集"></a>处理结果集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义存放查询返回结果的变量,类型与获取方式有关。</span><br>String id;<br><span class="hljs-keyword">while</span>(res.next())&#123;<br>    id = res.getString(<span class="hljs-string">&quot;id&quot;</span>) <span class="hljs-comment">//根据属性名返回结果集中的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="释放结果集，关闭连接"><a href="#释放结果集，关闭连接" class="headerlink" title="释放结果集，关闭连接"></a>释放结果集，关闭连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//释放结果集</span><br>res.close();<br><span class="hljs-comment">//关闭连接</span><br>con.close();<br></code></pre></td></tr></table></figure><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><h3 id="类图基础属性"><a href="#类图基础属性" class="headerlink" title="类图基础属性"></a>类图基础属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">-表示<span class="hljs-keyword">private</span><br>#表示<span class="hljs-keyword">protected</span><br>~表示<span class="hljs-keyword">default</span>,也就是包权限<br>_下划线表示<span class="hljs-keyword">static</span><br>斜体表示抽象<br></code></pre></td></tr></table></figure><h3 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h3><ul><li>在UML类图中，常见的有以下几种关系:</li></ul><ol><li><p>泛化（Generalization）</p></li><li><p>实现（Realization）</p></li><li><p>关联（Association）</p></li><li><p>聚合（Aggregation）</p></li><li><p>组合（Composition）</p></li><li><p>依赖（Dependency）</p></li></ol><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>表示方法：实线+空心三角形</li></ul><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><ul><li>表示方法：虚线+空心三角形</li></ul><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><h3 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h3><h4 id="顶层容器"><a href="#顶层容器" class="headerlink" title="顶层容器"></a>顶层容器</h4><ul><li>JFrame 框架，一般被继承</li></ul><h4 id="中间容器"><a href="#中间容器" class="headerlink" title="中间容器"></a>中间容器</h4><ul><li><p>JPanel 普通面板，<strong>最常用</strong></p></li><li><p>JTabbedPane 选项卡面板，<strong>用于需要切换界面</strong></p></li></ul><h4 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h4><ul><li><p>JLabel 标签</p></li><li><p>JButton 按钮</p></li><li><p>JTextField 文本框，一般用于做输入框</p></li><li><p>JTextArea 文本域，一般用于做显示框</p></li><li><p>JMenu 菜单</p></li><li><p>JMenuItem 菜单项</p></li></ul><h3 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h3><h4 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h4><ul><li><p>流式布局，从左向右排列，排满一行则换行</p></li><li><p>是JPanel的默认布局</p></li></ul><h4 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h4><ul><li>网格布局，将面板按行列划分为相等的网格</li></ul><h4 id="CardLayout"><a href="#CardLayout" class="headerlink" title="CardLayout"></a>CardLayout</h4><ul><li><p>卡片布局，将面板层叠放入容器</p></li><li><p>可以用来实现类似卡片面板的切换功能</p></li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="关于容器"><a href="#关于容器" class="headerlink" title="关于容器"></a>关于容器</h4><ul><li><p>setTitle() 设置标题</p></li><li><p>setSize() 设置窗口大小，(宽，高)</p></li><li><p>setVisible() 设置容器是否可见，true&#x2F;false</p></li><li><p>setLayout()  设置布局，常和布局一起使用</p></li><li><p>setDefaultCloseOperation(EXIT_ON_CLOSE)  设置关闭操作</p></li><li><p>add() 添加容器，控件等</p></li></ul><h4 id="关于控件"><a href="#关于控件" class="headerlink" title="关于控件"></a>关于控件</h4><ul><li><p>getText() 获取文字</p></li><li><p>setText() 设置文字</p></li><li><p>append() 文本域追加文字</p></li></ul><h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><ul><li><p>ActionListener 接口</p><ul><li>重写ActionPerformed(ActionEvent e)函数</li></ul></li><li><p>KeyListener 接口</p><ul><li><p>keyTyped(KeyEvent e)</p></li><li><p>keyPressed(KeyEvent e)</p></li><li><p>keyReleased(KeyEvent e)</p></li></ul></li><li><p>FocusListener 接口</p><ul><li><p>focusGained(FocusEvent e)</p></li><li><p>focusLost(FocusEvent e)</p></li></ul></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul><li><p>服务器端</p><ul><li><p>ServerSocket类</p></li><li><p>构造函数ServerSocket(port) 端口</p></li><li><p>方法 accept() 返回一个Socket对象</p></li></ul></li><li><p>客户端</p><ul><li><p>Socket类</p></li><li><p>构造函数Socket(ip, port) 服务器ip和端口</p></li></ul></li><li><p>传输</p><ul><li><p>DataInputStream(socket.getInputStream()) 通过此方法定义输入流对象</p></li><li><p>DataOutputStream(socket.getOutputStream()) 通过此方法定义输出流对象</p></li><li><p>readUTF() 从服务器&#x2F;客户端接收数据</p></li><li><p>writeUTF() 向服务器&#x2F;客户端发送数据</p></li></ul></li></ul><h2 id="I-x2F-O流"><a href="#I-x2F-O流" class="headerlink" title="I&#x2F;O流"></a>I&#x2F;O流</h2><p><img src="https://img-blog.csdnimg.cn/20190721043347273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NDA4NQ==,size_16,color_FFFFFF,t_70" alt="I/O流总结"></p><blockquote><p><a href="https://blog.csdn.net/zhaoyanjun6/article/details/54292148">Java IO流学习总结一：输入输出流_赵彦军-CSDN博客</a></p></blockquote><h2 id="MVC结构"><a href="#MVC结构" class="headerlink" title="MVC结构"></a>MVC结构</h2><h3 id="MVC，即-Model-模型、View-视图，及-Controller-控制器"><a href="#MVC，即-Model-模型、View-视图，及-Controller-控制器" class="headerlink" title="MVC，即 Model 模型、View 视图，及 Controller 控制器"></a>MVC，即 Model 模型、View 视图，及 Controller 控制器</h3><ul><li>View：视图，为用户提供使用界面，与用户直接进行交互。</li><li>Model：模型，承载数据，并对用户提交请求进行计算的模块。其分为两类：<br>一类称为数据承载 Bean：实体类，专门用户承载业务数据的，如 Student、User 等<br>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理用户提交请求的。</li><li>Controller：控制器，用于将用户请求转发给相应的 Model 进行处理，并根据 Model 的计算结果向用户提供相应响应。</li></ul><h3 id="MVC-架构程序的工作流程"><a href="#MVC-架构程序的工作流程" class="headerlink" title="MVC 架构程序的工作流程"></a>MVC 架构程序的工作流程</h3><ol><li><p>用户通过 View 页面向服务端提出请求，可以是表单请求、超链接请求、AJAX 请求等</p></li><li><p>服务端 Controller 控制器接收到请求后对请求进行解析，找到相应的 Model 对用户请求进行处理</p></li><li><p>Model 处理后，将处理结果再交给 Controller</p></li><li><p>Controller 在接到处理结果后，根据处理结果找到要作为向客户端发回的响应 View 页面。页面经渲染（数据填充）后，再发送给客户端。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Summarize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译安装Vue-devtools</title>
    <link href="/2022/11/20/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Vue-devtools/"/>
    <url>/2022/11/20/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Vue-devtools/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Vue-devtool环境要求"><a href="#安装Vue-devtool环境要求" class="headerlink" title="安装Vue-devtool环境要求"></a>安装Vue-devtool环境要求</h2><ul><li>安装环境要求node在6以上，npm在3以上</li><li>此教程测试使用的环境<ul><li>Vue-devtools add-remote-devtools</li><li>npm 6.14.13</li><li>node v14.17.0</li></ul></li></ul><h2 id="clone-或者下载"><a href="#clone-或者下载" class="headerlink" title="clone 或者下载"></a>clone 或者下载</h2><ul><li>clone和下载地址<br>github网址: <a href="https://github.com/vuejs/vue-devtools/tree/add-remote-devtools">https://github.com/vuejs/vue-devtools/tree/add-remote-devtools</a><br>clone地址: <a href="https://github.com/vuejs/vue-devtools.git">https://github.com/vuejs/vue-devtools.git</a></li><li>若选择下载压缩包，先解压到需要的目录，建议修改文件夹名，此处我修改为<code>vue-devtools</code></li></ul><h2 id="npm-编译"><a href="#npm-编译" class="headerlink" title="npm 编译"></a>npm 编译</h2><ul><li><p>打开<code>cmd</code>，切换到<code>vue-devtools</code>目录下</p></li><li><p>输入<code>npm install</code>，回车执行<br><img src="https://img-blog.csdnimg.cn/20210607114721598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>待执行完毕后输入<code>npm run build</code>，回车执行<br><img src="https://img-blog.csdnimg.cn/20210607114732359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ul><h2 id="Chrome-安装"><a href="#Chrome-安装" class="headerlink" title="Chrome 安装"></a>Chrome 安装</h2><ul><li>打开谷歌浏览器-&gt;设置-&gt;更多工具-&gt;扩展程序</li><li>点击加载已解压的扩展程序</li><li>找到<code>vue-devtools</code>目录下的<code>shells</code>文件夹</li><li>选择<code>shells</code>文件夹中的<code>Chrome</code>文件夹</li><li>点击选择文件夹，安装成功</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>打开<code>cmd</code>，切换到<code>vue-devtools</code>目录下</li><li>执行<code>npm run dev</code></li><li>浏览器访问<a href="http://localhost:8080/">http://localhost:8080/</a></li><li>可查看vue实例</li><li>在使用vue编写的网页上，插件图标会亮起，点击可使用。</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul><li>通过此教程安装的Vue-devtools版本为<code>Vue.js devtools 4.0.1</code>，而Chrome网上应用商店下载安装的版本为<code>Vue.js devtools 5.3.4</code>，尝试编译Vue-devtools的next版本，但编译失败，此问题仍需解决。</li><li>待学习vue.js后将详细介绍Vue-devtools的使用。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vs2019下创建的Qt项目发布并制作安装程序流程</title>
    <link href="/2022/11/18/vs2019%E4%B8%8B%E5%88%9B%E5%BB%BA%E7%9A%84Qt%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E5%B9%B6%E5%88%B6%E4%BD%9C%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/11/18/vs2019%E4%B8%8B%E5%88%9B%E5%BB%BA%E7%9A%84Qt%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E5%B9%B6%E5%88%B6%E4%BD%9C%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>梳理了如何制作安装教程的流程。</li><li>在以下测试环境中通过<ul><li>VS2019</li><li>Qt 5.14.2</li><li>Windows 10</li></ul></li><li>总结了网上主流教程没有的解决问题方法<ul><li><a href="#jump1">Qt项目拉取依赖</a></li><li><a href="#jump2"><code>Application Folder</code>下创建的文件夹，将不会自动创建</a></li><li><a href="#jump3">生成项目时报有警告</a></li></ul></li><li>文章没有图片，但十分详细如果环境相似请耐心阅读。</li></ul><h2 id="首先下载Microsoft-Visual-Studio-Installer-Projects插件"><a href="#首先下载Microsoft-Visual-Studio-Installer-Projects插件" class="headerlink" title="首先下载Microsoft Visual Studio Installer Projects插件"></a>首先下载Microsoft Visual Studio Installer Projects插件</h2><ul><li>项目下点击: 扩展-&gt;管理扩展-&gt;选择联机-&gt;搜索框输入<code>installer</code>搜索-&gt;安装插件-&gt;关闭所有vs界面后自动安装。</li></ul><h2 id="新建Setup项目"><a href="#新建Setup项目" class="headerlink" title="新建Setup项目"></a>新建Setup项目</h2><ul><li>项目下点击: 右键解决方案-&gt;添加-&gt;新建项目…-&gt;搜索<code>Setup</code>-&gt;选择<code>Setup Project</code>-&gt; 下一步直到创建好Setup项目</li></ul><h2 id="了解Setup项目"><a href="#了解Setup项目" class="headerlink" title="了解Setup项目"></a>了解Setup项目</h2><ul><li>vs在创建好Setup项目后会默认打开项目的文件系统，如果不慎关闭或者未打开可以依次点击: 右键Setup项目-&gt;view-&gt;文件系统(File System)</li><li>文件系统(File System)中主要分为三个文件夹<code>Application Folder</code>, <code>User&#39;s Desktop</code> ,<code>User&#39;sPrograms Menu</code><ul><li><code>Application Folder</code> 存放主程序入口(主输出)、依赖(.dll)、图标(.ico)、卸载程序</li><li><code>User&#39;s Desktop</code> 存放桌面快捷方式</li><li><code>User&#39;s Programs Menu</code>存放开始菜单的快捷方式<br><span id="jump1"></span></li></ul></li></ul><h2 id="Qt项目制作安装程序前准备"><a href="#Qt项目制作安装程序前准备" class="headerlink" title="Qt项目制作安装程序前准备"></a>Qt项目制作安装程序前准备</h2><ul><li>vs生成Release版本的.exe: 点击调试-&gt;项目属性-&gt;点击配置管理器-&gt;检查是否为Release-&gt;点击生成-&gt;生成项目。</li><li>从Qt自带的控制台进入-&gt;将路径切换到生成的Release版本的.exe路径下-&gt;执行<code>windeployqt xxx.exe</code></li><li><code>xxx.exe</code>为你Qt项目的名称。</li><li>等待执行完毕则成功将Qt项目所需的依赖(.dll)，拉取到你的.exe文件目录下，此时双击.exe文件则可直接执行。</li></ul><h2 id="编辑Setup项目"><a href="#编辑Setup项目" class="headerlink" title="编辑Setup项目"></a>编辑Setup项目</h2><h3 id="首先添加主输出"><a href="#首先添加主输出" class="headerlink" title="首先添加主输出"></a>首先添加主输出</h3><ul><li>右键<code>Application Folder</code>-&gt;Add-&gt;项目输出-&gt;主输出</li></ul><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul><li>右键<code>Application Folder</code>-&gt;Add-&gt;文件，选择需要的文件(.dll)</li></ul><h3 id="添加具有文件夹的依赖"><a href="#添加具有文件夹的依赖" class="headerlink" title="添加具有文件夹的依赖"></a>添加具有文件夹的依赖</h3><ul><li>例如Qt项目所需的依赖一部分与.exe同级另一部分则在与.exe同级的文件夹下</li><li>右键<code>Application Folder</code>-&gt;Add-&gt;文件夹(Folder)-&gt;修改文件夹名称为依赖所需的文件夹名-&gt;单击打开文件夹-&gt;右侧右击-&gt;Add-&gt;文件，选择需要的文件(.dll)<br><span id="jump2"></span></li></ul><h3 id="使文件夹在安装的时候创建"><a href="#使文件夹在安装的时候创建" class="headerlink" title="使文件夹在安装的时候创建"></a>使文件夹在安装的时候创建</h3><ul><li>如果不做修改，在生成好<code>Setup.exe</code>和<code>Setup.msi</code>文件后，安装到电脑时，对于自己在<code>Application Folder</code>下创建的文件夹，将不会自动创建，因此会破坏目录结构，安装好的文件将因为无法找到依赖而无法运行。</li><li>解决方法: 右键自己创建的文件夹-&gt;单击属性窗口(F4)-&gt;修改属性窗口中的<code>AlwaysCreate</code>和<code>transitive</code>为<code>True</code></li></ul><h3 id="添加快捷方式"><a href="#添加快捷方式" class="headerlink" title="添加快捷方式"></a>添加快捷方式</h3><ul><li>桌面快捷方式(Shortcut): 打开<code>User&#39;s Desktop</code>-&gt;右侧右击-&gt;创建新的快捷方式(C)-&gt;选择<code>Application Folder</code>(默认)-&gt;点击Ok或者双击<code>Application Folder</code>-&gt;选择主输出-&gt;创建后修改快捷方式的名字(此名字为桌面自动生成的快捷方式的名字)</li><li>开始菜单的快捷方式: 打开<code>User&#39;s Programs Menu</code>-&gt;后续步骤与创建桌面快捷方式无异。</li><li>如有多个文件需要连接到开始菜单，可以在开始菜单创建文件夹来存放: 右键<code>User&#39;s Programs Menu</code>-&gt;Add-&gt;文件夹(Floder)-&gt;修改文件夹为想要的名字-&gt;打开文件夹-&gt;后续步骤与创建桌面快捷方式无异。</li><li>开始菜单的文件夹会自动创建。</li></ul><h3 id="添加图标"><a href="#添加图标" class="headerlink" title="添加图标"></a>添加图标</h3><ul><li>右键<code>Application Folder</code>-&gt;Add-&gt;文件，选择需要的图标文件(.ico)</li><li>给快捷方式添加图标: 单击创建好的快捷方式(Shortcut)-&gt;属性窗口中找到<code>Icon</code>-&gt;下拉框找到并单击<code>Browse</code>-&gt;再次点击弹出窗口的<code>Browse</code>-&gt;在<code>Application Folder</code>下找到需要的图标文件(.ico)-&gt;点击Ok添加完成。</li><li>所有快捷方式或者.exe只要属性窗口有<code>Icon</code>都可以参照上述步骤修改图标。<br><span id="jump3"></span></li></ul><h2 id="修改Setup项目属性"><a href="#修改Setup项目属性" class="headerlink" title="修改Setup项目属性"></a>修改Setup项目属性</h2><ul><li>点击<code>Setup</code>项目，查看属性窗口</li><li>注意<code>Author</code>, <code>Manufacturer</code>,<code>ProductCode</code>,<code>TargetPlatform</code>,<code>Title</code></li><li>尤其注意<code>TargetPlatform</code>,默认为<code>x86</code>,如果项目生成的是<code>x64</code>版本的需要修改，否则会报警告。</li><li>还有一项属性为了更好的兼容,可以修改也可以不修改。</li><li>步骤: 右键<code>Setup</code>项目-&gt;点击属性-&gt;点击<code>Prerequisites</code>-&gt;勾选<code>Microsoft .NET Framework 4.6.1 (x86和x64)</code>-&gt;点击确定</li></ul><h2 id="生成Setup项目"><a href="#生成Setup项目" class="headerlink" title="生成Setup项目"></a>生成Setup项目</h2><ul><li>右键项目名生成</li><li>会生成<code>Setup.exe</code>和<code>Setup.msi</code>文件</li><li><code>Setup.exe</code>相当于<code>Setup.msi</code>的一个连接,使用<code>Setup.exe</code>安装时需要确保两个文件在同一目录下。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>Installer</tag>
      
      <tag>vs2019</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA 2020.2.3 配置使用 Tomcat+Servlet</title>
    <link href="/2022/11/18/Intellij-IDEA-2020-2-3-%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-Tomcat-Servlet/"/>
    <url>/2022/11/18/Intellij-IDEA-2020-2-3-%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-Tomcat-Servlet/</url>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul><li>添加新项目如下图：<br><img src="https://img-blog.csdnimg.cn/20210517162520150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="添加新项目"></li><li>弹出的窗口中选择<code>Java Enterprise</code>，点击<code>Next</code><br><img src="https://img-blog.csdnimg.cn/20210517162815563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="选择Java Enterprise"></li><li>下一个界面中勾选<code>Servlet</code>，点击<code>Next</code><br><img src="https://img-blog.csdnimg.cn/20210517163111308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>选择文件名和文件路径，点击<code>FInish</code><br><img src="https://img-blog.csdnimg.cn/20210517163554264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="配置-Tomcat-服务器"><a href="#配置-Tomcat-服务器" class="headerlink" title="配置 Tomcat 服务器"></a>配置 Tomcat 服务器</h2><ul><li><p>若为在<code>Intellij IDEA</code> 中添加过<code>Tomcat Server</code>，则在<code>Setting</code>中设置添加自己安装的<code>tomcat</code>服务器，<code>tomcat</code>服务器安装可以参考<a href="https://hwh-2019.github.io/2022/11/18/Tomcat-PHP-Mysql%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">Tomcat+PHP+Mysql环境配置</a><br><img src="https://img-blog.csdnimg.cn/20210517164931586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>点击<code>Run</code>中的<code>Edit Configuration</code><br><img src="https://img-blog.csdnimg.cn/20210517163832878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>点击添加<code>Tomcat Server</code><br><img src="https://img-blog.csdnimg.cn/20210517164059685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>下方会警告<code>Warning: No artifacts marked for deployment</code>，切换到Deployment下。<br><img src="https://img-blog.csdnimg.cn/20210517164356390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>添加<code>build artifact</code>，点击<code>Ok</code><br><img src="https://img-blog.csdnimg.cn/20210517164540814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h2><h3 id="执行-jsp-文件"><a href="#执行-jsp-文件" class="headerlink" title="执行 jsp 文件"></a>执行 jsp 文件</h3><ul><li><p>在<code>src/main/webapp</code>文件夹下新建文件<code>index.jsp</code><br><img src="https://img-blog.csdnimg.cn/20210517171554670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><code>index.jsp</code>文件内容如下</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby">@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSP - Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&lt;%=</span><span class="language-ruby"> <span class="hljs-string">&quot;Hello World!&quot;</span> </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;hello-servlet&quot;</span>&gt;</span>Hello Servlet<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>点击运行启动服务，效果如下：<br><img src="https://img-blog.csdnimg.cn/20210517171452430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h3 id="执行-Servlet"><a href="#执行-Servlet" class="headerlink" title="执行 Servlet"></a>执行 Servlet</h3><ul><li>在<code>src/main/java</code>文件夹下新建包<code>servlet</code>，并在其中添加<code>HelloWorld.java</code>文件</li></ul><p><img src="https://img-blog.csdnimg.cn/20210517172058218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70"></p><ul><li><code>HelloWorld.java</code>文件内容如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> servlet;<br><br><span class="hljs-comment">// 导入必需的 java 库</span><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><br><span class="hljs-comment">// 扩展 HttpServlet 类</span><br><span class="hljs-meta">@WebServlet(&quot;/Servlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException<br>    &#123;<br>        <span class="hljs-comment">// 执行必需的初始化</span><br>        message = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                      HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException<br>    &#123;<br>        <span class="hljs-comment">// 设置响应内容类型</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br><br>        <span class="hljs-comment">// 实际的逻辑是在这里</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>        out.println(<span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">// 什么也不做</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>打开<code>src/main/webapp/WEB_INF</code>下的<code>web.xml</code>文件，在<code>&lt;web-app&gt;</code>中添加如下内容：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>servlet.HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>点击运行启动服务，浏览器访问切换到<code>HelloWorld</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//localhost:8080/demo1_war_exploded</span><br><span class="hljs-comment">//由上面的路径切换到下面的路径</span><br>http:<span class="hljs-comment">//localhost:8080/demo1_war_exploded/HelloWorld</span><br></code></pre></td></tr></table></figure><ul><li>成功的效果如下：<br><img src="https://img-blog.csdnimg.cn/2021051717310279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="Tomcat-版本问题"><a href="#Tomcat-版本问题" class="headerlink" title="Tomcat 版本问题"></a>Tomcat 版本问题</h2><p>如果使用<code>tomcat 10</code>版本，则上面切换到<code>HelloWorld</code>目录后会报错。<br>解决方法有两个：</p><ol><li>更换tomcat版本，安装<code>tomcat 9</code></li><li>手动导入<code>tomcat 10</code>所带的<code>servlet-api.jar</code></li></ol><h3 id="手动导入-servlet-api-jar"><a href="#手动导入-servlet-api-jar" class="headerlink" title="手动导入 servlet-api.jar"></a>手动导入 servlet-api.jar</h3><ul><li><p>打开<code>File</code>下<code>Project Structure</code>中的<code>Modules</code>，切换到<code>Dependencies</code><br><img src="https://img-blog.csdnimg.cn/20210517174145999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>点击加号添加，选择自己<code>tomcat</code>路径<code>lib</code>下的<code>servlet-api.jar</code><br><img src="https://img-blog.csdnimg.cn/2021051717445148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>打开项目下的<code>pom.xml</code>文件，删除如下内容：<br><img src="https://img-blog.csdnimg.cn/20210517174816294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>点击重新运行启动服务，浏览器访问切换到<code>HelloWorld</code>目录下，即可正常访问。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
      <tag>Servlet</tag>
      
      <tag>Intellij IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat+PHP+Mysql环境配置</title>
    <link href="/2022/11/18/Tomcat-PHP-Mysql%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/11/18/Tomcat-PHP-Mysql%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>Tomcat 10.0.6</li><li>PHP 8.0.6</li><li>Mysql 8.0.21</li></ul><h2 id="Tomcat-安装配置"><a href="#Tomcat-安装配置" class="headerlink" title="Tomcat 安装配置"></a>Tomcat 安装配置</h2><ul><li>下载tomcat 从tomcat官网<a href="https://tomcat.apache.org/download-10.cgi">下载zip包</a></li><li>解压到自己想要的目录下</li><li>使用Tomcat之前需要JDK以及JAVA_HOME环境变量配置</li><li>修改<code>conf</code>文件下的<code>logging.properties</code>文件,<a href="https://blog.csdn.net/weixin_44580492/article/details/106358111">解决控制台乱码问题</a></li><li>配置tomcat环境变量，将<code>bin</code>目录路径添加到<code>path</code>下</li><li><code>cmd</code>下执行startup启动服务</li><li>浏览器输入<code>localhost:8080</code>,成功启动服务效果如下图:<br><img src="https://img-blog.csdnimg.cn/20210516194605404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="tomcat初始界面"></li></ul><h2 id="Tomcat-配置-PHP"><a href="#Tomcat-配置-PHP" class="headerlink" title="Tomcat 配置 PHP"></a>Tomcat 配置 PHP</h2><ul><li><p><a href="https://windows.php.net/download#php-7.0">官网下载php</a></p></li><li><p>将php解压到自己想要的目录下</p></li><li><p>复制一份<code>php.ini-development</code>,并改名为<code>php.ini</code></p></li><li><p>修改<code>php.ini</code>文件</p><ul><li>搜索定位到<code>extension_dir= &quot;ext&quot;</code>,去掉此行前的<code>;</code>,也可重写并指定<code>ext</code>文件夹的路径</li><li>搜索定位到<code>cgi.force_redirect</code>,改为<code>cgi.force_redirect=0</code></li></ul></li><li><p>回到<code>tomcat</code>所在目录下，打开<code>conf/context.xml</code>文件</p></li><li><p>将<code>&lt;context&gt;</code>标签加上<code>privileged = &quot;true&quot;</code>属性,即修改为<code>&lt;Context privileged=&quot;true&quot;&gt;</code></p></li><li><p>打开<code>web.xml</code>文件,在添加<code>&lt;web-app&gt;</code>中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- ================== Built In Servlet Definitions ==================== --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>php<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.CGIServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>clientInputTimeout<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>debug<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>executable<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 此处为php-cgi.exe的路径，需要根据自己的文件路径进行修改 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>D:\tomcat\php\php-cgi.exe<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>passShellEnvironment<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>cgiPathPrefix<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 此处与后文对应 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>WEB-INF/phpbin<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注意修改<code>php-cgi.exe</code>的路径，路径为自己安装<code>php</code>的路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- ================ Built In Servlet Mappings ========================= --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>php<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/phpbin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>重启服务</p></li><li><p>由于上面在<code>web.xml</code>中添加了<code>&lt;param-value&gt;WEB-INF/phpbin&lt;/param-value&gt;</code>,因此在<code>WEB-INF</code>下新建<code>phpbin</code>文件夹,并新建<code>index.php</code>作为测试。</p></li><li><p><code>index.php</code>的内容为:</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>确保服务已启动,访问 <a href="http://localhost:8080/phpbin/index.php">http://localhost:8080/phpbin/index.php</a> 查看效果，正确效果如下：<br><img src="https://img-blog.csdnimg.cn/20210516194717224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="php验证"></li></ul><h2 id="配置-Tomcat-利用-jsp-连接-Mysql"><a href="#配置-Tomcat-利用-jsp-连接-Mysql" class="headerlink" title="配置 Tomcat 利用 jsp 连接 Mysql"></a>配置 Tomcat 利用 jsp 连接 Mysql</h2><ul><li>将mysql的jdbc驱动程序放到tomcat的lib中,如:<a href="https://download.csdn.net/download/h2763246823/18777147">mysql-connector-java-8.0.21.jar</a></li><li>在<code>ROOT</code>目录下新建<code>connect_mysql.jsp</code>文件,添加如下内容:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*&quot;</span> pageEncoding=<span class="hljs-string">&quot;gbk&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.sql.*&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;My JSP starting page&lt;/title&gt;<br>  &lt;/head&gt;<br><br>  &lt;body&gt;<br>    &lt;span&gt;<br>     &lt;%<br>       try &#123;<br>//加载驱动<br>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);<br>//URL指向要访问的数据库名<br>            String url = &quot;jdbc:mysql://127.0.0.1:3306/enwords?serverTimezone=UTC&quot;;<br>            //用户名<br>            String user=&quot;***&quot;;<br>            //密码<br>            String password=&quot;***&quot;;<br>//建立连接<br>Connection con=DriverManager.getConnection(url,user,password);<br>    //创建状态<br>Statement state=con.createStatement();<br>            //3.要执行的sql语句,需要读者自行修改<br>            String sql=&quot;select * from enwords limit 100,120;&quot;;<br>            //4.ResultSet类，用来存放获取的结果集！！<br>ResultSet rs=state.executeQuery(sql);<br><br>String word=null;<br>            String translation=null;<br>            String aString=&quot;&quot;;<br>            //读者请根据自己的数据库表修改打印内容。<br>while(rs.next())&#123;<br>    word=rs.getString(&quot;word&quot;);<br>                translation=rs.getString(&quot;translation&quot;);<br>aString+=word+&quot;\t&quot;+translation+&quot;&lt;br&gt;&quot;<br>+&quot;----------------------------&lt;br&gt;&quot;;<br>&#125;<br>out.println(aString);<br>state.close();<br>con.close();<br><br>&#125; catch (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>     %&gt;<br>    &lt;/span&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li>根据自己<code>mysql</code>情况修改用户名，密码，需要执行的sql语句。</li><li>不熟悉<code>JSP</code>语句的可以去<a href="https://www.runoob.com/jsp/jsp-database-access.html">菜鸟教程</a>学习。</li><li>确保tomcat服务已启动,访问 <a href="http://localhost:8080/connect_mysql.jsp">http://localhost:8080/connect_mysql.jsp</a> 查看效果。</li></ul><h2 id="配置-Tomcat-利用-PHP-连接-Mysql"><a href="#配置-Tomcat-利用-PHP-连接-Mysql" class="headerlink" title="配置 Tomcat 利用 PHP 连接 Mysql"></a>配置 Tomcat 利用 PHP 连接 Mysql</h2><ul><li>为php添加mysql扩展,在<code>php.ini</code>中搜索定位<code>extension</code>,将下面两行前的<code>;</code>去掉</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">extension</span>=mysqli<br><span class="hljs-attr">extension</span>=pdo_mysql<br></code></pre></td></tr></table></figure><ul><li>在<code>WEB_INF/phpbin</code>下新建<code>connect_mysql.php</code>文件,并写入以下内容</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;***&quot;</span>;<span class="hljs-comment">//用户名</span><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;***&quot;</span>;<span class="hljs-comment">//密码</span><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;***&quot;</span>;<span class="hljs-comment">//数据库名</span><br><br><span class="hljs-comment">// 创建连接</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><span class="hljs-comment">// 检测连接</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br>&#125;<br><span class="hljs-comment">//sql语句,读者根据自己的数据库和表修改语句。</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from enwords limit 0,100&quot;</span>;<br><br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;-------------------------------&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 输出数据,请读者根据自己的表和打印要求进行修改。</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;strong&gt;word&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsptranslation&lt;/strong&gt;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>()) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;word&quot;</span>]. <span class="hljs-string">&quot;&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&quot;</span> .<br><span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;translation&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;-------------------------------&lt;br&gt;&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;0 结果&quot;</span>;<br>&#125;<br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>根据自己的情况填入对应的用户名，密码，数据库名和sql语句。</li><li>不熟悉<code>php</code>语句的可以去<a href="https://www.runoob.com/php/php-mysql-intro.html">菜鸟教程</a>学习。</li><li>确保tomcat服务已启动，访问<a href="http://localhost:8080/phpbin/connect_mysql.php">http://localhost:8080/phpbin/connect_mysql.php</a> 查看效果。</li></ul><h2 id="可能遇到的问题解决"><a href="#可能遇到的问题解决" class="headerlink" title="可能遇到的问题解决"></a>可能遇到的问题解决</h2><ul><li>如果<code>php</code>连接<code>mysql</code>出现<code>The server requested authentication method unknown to the client</code>报错</li><li><code>cmd</code>下登录数据库，执行如下语句修改密码。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p<br><br>use mysql;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;你的密码&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
      <tag>PHP</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让你的电脑也识得二维码图片(二)</title>
    <link href="/2022/11/18/%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E4%B9%9F%E8%AF%86%E5%BE%97%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87-%E4%BA%8C/"/>
    <url>/2022/11/18/%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E4%B9%9F%E8%AF%86%E5%BE%97%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h2><p>之前写了一份能够让电脑识别二维码图片的脚本，详细参见<a href="https://hwh-2019.github.io/2022/11/18/%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E4%B9%9F%E8%AF%86%E5%BE%97%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87-%E4%B8%80/">《让你的电脑也识得二维码图片（一）》</a><br>虽然已经可以做到比较方便的识别电脑上的二维码，但是还是需要将二维码图片下载到本地，然后才能识别，这就比较麻烦，正所谓没有最懒只有更懒，懒是人类进步的源泉。我便想能不能不用下载到本地就可以识别，并且让出现在所有场景下的二维码均可识别。<br>尝试了一些思路，都比较复杂，不易实现。</p><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><h3 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h3><p>要实现不下载就识别，如何获取到图片是一个问题，目前二维码出现在各种网页，软件之中。<br>网页的话可以尝试插件，比如<a href="https://crxdoc-zh.appspot.com/extensions/devguide">chrome插件</a>。直接在浏览器中调用识别二维码的api对二维码进行识别。但本人不会，下次一定。<br>而软件中的就很难处理(你不可能强行修改软件)，你只有下载下来。</p><h2 id="新的思路"><a href="#新的思路" class="headerlink" title="新的思路"></a>新的思路</h2><p>今天由QQ截图突然想到，可以直接从屏幕中截取出二维码进行识别，于是尝试着写一个类似QQ截图的软件然后保存到本地，搞到一半意识到，这太麻烦了，而且终归是保存到了本地，和下载没有区别，放弃。<br>但是QQ截图，其实并没有保存图片到本地，而是将图片保存到了剪切板中，想到这我突然产生了新的思路：</p><blockquote><p>从剪切板中获取二维码图像然后进行识别</p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>CSDN上搜索了一下发现了PIL中的ImageGrab模块<br>调用此模块</p><blockquote><p>from PIL import ImageGrab</p></blockquote><p>从剪切板获取</p><blockquote><p>image &#x3D; ImageGrab.grabclipboard()</p></blockquote><p>然后就好了。</p><h2 id="右键"><a href="#右键" class="headerlink" title="右键"></a>右键</h2><p>还是想用右键菜单操作，这次仍需要更改注册表，但位置和内容都不同，之前是针对所有图片的右键菜单，这次针对在不选中文件或文件夹情况下的右键菜单。<br>因此打开注册表编辑器，到计算机\HKEY_CLASSES_ROOT\Directory\Background\shell\路径下，新建名为 识别剪切板二维码 的项，再在此项下新建 command 项，修改数值数据为：</p><blockquote><p>D:\Python\test\gcb_demo.bat</p></blockquote><p>由于gcb_demo.py的执行无需传参，因此只需要指明路径即可。<br>.bat文件中也无需接收参数。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>二维码识别功能还有待加强<br>源码放在<a href="https://gitee.com/HWHfile/recognize-qrcode/tree/master/Recognize%20Qrcode-grabclipboard">Gitee</a></p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Shell</tag>
      
      <tag>ORcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让你的电脑也识得二维码图片(一)</title>
    <link href="/2022/11/18/%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E4%B9%9F%E8%AF%86%E5%BE%97%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87-%E4%B8%80/"/>
    <url>/2022/11/18/%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E4%B9%9F%E8%AF%86%E5%BE%97%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>昨日突发奇想，想在电脑上实现二维码图片的识别解码。因此查了点资料决定用python的pyzbar包写一个二维码解码的脚本。<br>首先pip安装pyzbar库：</p><blockquote><p>pip install pyzbar</p></blockquote><p>掏出python写下了如下程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> webbrowser<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> pyzbar <span class="hljs-keyword">import</span> pyzbar<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_qr_code</span>(<span class="hljs-params">code_img_path</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(code_img_path):<br>        <span class="hljs-keyword">raise</span> FileExistsError(code_img_path)<br>    <span class="hljs-keyword">return</span> pyzbar.decode(Image.<span class="hljs-built_in">open</span>(code_img_path), symbols=[pyzbar.ZBarSymbol.QRCODE])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    src = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入二维码路径：&quot;</span>)<br>    results = decode_qr_code(src)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;http://&quot;</span> <span class="hljs-keyword">in</span> results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;https://&quot;</span> <span class="hljs-keyword">in</span> results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>):<br>            webbrowser.<span class="hljs-built_in">open</span>(results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>        <span class="hljs-built_in">print</span>(results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Can not recognize.&quot;</span>)<br></code></pre></td></tr></table></figure><p>嗯，还不错，只需要运行python脚本输入二维码路径就可以打开识别了，而且做了分类，对于纯文本直接打印，对于网址则使用webbrowser使用默认浏览器打开网址。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>虽然我觉得这个脚本还不错啦，可以实现二维码图片的识别解码了，但我觉得这个输入二维码图片路径不大方便（或许是我懒），还有就是每次运行都得找到这个python脚本，着实不大方便。<br>嗯，得想个办法无需找到python脚本就能直接执行，总不能放个python脚本在桌面吧太丑了。<br>突然我灵机一动想到了我们的右键菜单栏：<br><img src="https://img-blog.csdnimg.cn/20210219104257525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70" alt="右键菜单栏"><br>这玩意儿多方便啊，只需要找到二维码图片，然后右击打开菜单栏，然后执行脚本文件就好啦。<br>立马动手查找资料，看到右键菜单栏添加项需要修改注册表，嗯，按下win+r<br>输入regedit回车打开注册表编辑器，到计算机\HKEY_CLASSES_ROOT\SystemFileAssociations\image\shell\目录下新建一个项叫Recognize Qrcode（自己取的名字，会显示到右键菜单栏中，上图中有），然后再在Recognize Qrcode&#x2F;下新建一个command项，双击名称修改其中的数值数据，起初我填的是(注意是英文 “)：</p><blockquote><p>D:\Python\test\demo.py “%1”</p></blockquote><p>退出注册表编辑器后右键图片确实可以出现新添加的Recognize Qrcode，但单击执行却提示：<br><img src="https://img-blog.csdnimg.cn/20210219105522355.png" alt="在这里插入图片描述"><br>哦豁，无法直接执行python脚本，查阅网上资料发现，可以写个.bat文件然后去执行python脚本，即将之前填写的数值数据改成(注意是英文 “)：</p><blockquote><p>D:\Python\test\demo.bat “%1”</p></blockquote><p>然后偷学一点批处理命令写了个.bat文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">cd</span>  d:\Python\<span class="hljs-built_in">test</span><br>d:<br>python demo.py %*<br>pause<br></code></pre></td></tr></table></figure><p>然后再次测试，果然能够成功通过右键菜单运行python脚本了。</p><h2 id="再改进"><a href="#再改进" class="headerlink" title="再改进"></a>再改进</h2><p>虽然解决了去寻找python脚本的麻烦，但是还是得手动输入图片路径，这还是好麻烦，能不能在右键菜单运行python脚本的时候直接获取到图片的路径呢。<br>好的，继续查资料，查了半天还是把目光盯到了右键上，经过一番搜索，发现：</p><blockquote><p>右键的同时系统是会提取到图片的路径的</p></blockquote><p>呦吼，这不就是我想要的嘛。接着开始修改代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> webbrowser<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> pyzbar <span class="hljs-keyword">import</span> pyzbar<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_qr_code</span>(<span class="hljs-params">code_img_path</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(code_img_path):<br>        <span class="hljs-keyword">raise</span> FileExistsError(code_img_path)<br>    <span class="hljs-keyword">return</span> pyzbar.decode(Image.<span class="hljs-built_in">open</span>(code_img_path), symbols=[pyzbar.ZBarSymbol.QRCODE])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 修改此处直接从系统得到了路径</span><br>    src = sys.argv[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    results = decode_qr_code(src)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;http://&quot;</span> <span class="hljs-keyword">in</span> results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;https://&quot;</span> <span class="hljs-keyword">in</span> results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>):<br>            webbrowser.<span class="hljs-built_in">open</span>(results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>        <span class="hljs-built_in">print</span>(results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Can not recognize.&quot;</span>)<br></code></pre></td></tr></table></figure><p>测试运行成功。</p><h2 id="再加个小功能"><a href="#再加个小功能" class="headerlink" title="再加个小功能"></a>再加个小功能</h2><p>既然右键的时候系统已经能获取到路径了，这不给我们平时复制文件路径提供了一个新思路嘛，按照如上流程可以写一个在右键菜单栏中直接获取到文件路径的脚本，将获取到的路径发送到剪切板中（提一句windows的剪切板真香，建议win+v打开）。<br>为了测试这个想法，我在这个二维码解码的脚本中也加入了这个功能。<br>使用subprocess将获取到的路径发到剪切板中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> webbrowser<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> pyzbar <span class="hljs-keyword">import</span> pyzbar<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_qr_code</span>(<span class="hljs-params">code_img_path</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(code_img_path):<br>        <span class="hljs-keyword">raise</span> FileExistsError(code_img_path)<br>    <span class="hljs-keyword">return</span> pyzbar.decode(Image.<span class="hljs-built_in">open</span>(code_img_path), symbols=[pyzbar.ZBarSymbol.QRCODE])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 添加此处将获取到的文件路径发送到剪切板</span><br>    cmd = <span class="hljs-string">&#x27;echo &#x27;</span> + sys.argv[<span class="hljs-number">1</span>].strip().replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) + <span class="hljs-string">&#x27;|clip&#x27;</span><br>    subprocess.check_call(cmd, shell=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 修改此处直接从系统得到了路径</span><br>    src = sys.argv[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    results = decode_qr_code(src)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;http://&quot;</span> <span class="hljs-keyword">in</span> results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;https://&quot;</span> <span class="hljs-keyword">in</span> results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>):<br>            webbrowser.<span class="hljs-built_in">open</span>(results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>        <span class="hljs-built_in">print</span>(results[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Can not recognize.&quot;</span>)<br></code></pre></td></tr></table></figure><p>经测试完美实现此功能。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个二维码识别功能还比较简陋，只能识别单张二维码，且图片必须保存到本地，还有较大的改进空间。<br>有更新想法的可以在评论提出。<br>源码及后续改进将发布在<a href="https://gitee.com/HWHfile/recognize-qrcode">Gitee</a></p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Shell</tag>
      
      <tag>ORcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORB_SLAM编译流程及相关报错处理</title>
    <link href="/2022/11/18/ORB-SLAM%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <url>/2022/11/18/ORB-SLAM%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><a href="http://webdiis.unizar.es/~raulmur/orbslam/">ORB-SLAM</a>是一种多功能且精确的单目SLAM解决方案，能够在各种环境下实时计算摄像机轨迹和稀疏的3D场景重建，从小型手持序列到在多个城市驾驶的汽车块。它能够关闭大型环路，并实时地从宽基线进行全局重新定位。<br>注意：本次编译使用的环境是安装在虚拟机中的Ubuntu18.04，且ORB_SLAM是基于ROS运行的，因此请确保已安装好linux环境及ROS系统。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1-虚拟机及ROS准备-未使用虚拟机的可跳过此步"><a href="#1-虚拟机及ROS准备-未使用虚拟机的可跳过此步" class="headerlink" title="1.虚拟机及ROS准备(未使用虚拟机的可跳过此步)"></a>1.虚拟机及ROS准备(未使用虚拟机的可跳过此步)</h3><p>安装虚拟机，并安装好Ubuntu18.04以及ROS系统，详细教程可参见<a href="https://www.ngui.cc/51cto/show-23557.html">此处</a><br>由于是在虚拟机中执行，需要让虚拟机连接到外接USB摄像头或者电脑本机摄像头，详细教程可参见<a href="https://blog.csdn.net/weixin_43849277/article/details/109061739">此处</a></p><h3 id="2-ORB-SLAM所需环境准备"><a href="#2-ORB-SLAM所需环境准备" class="headerlink" title="2.ORB_SLAM所需环境准备"></a>2.ORB_SLAM所需环境准备</h3><p>首先安装好opencv，网上教程颇多可以自行查阅。<br>然后使用如下两个命令分别安装boost和eigen3</p><blockquote><p>sudo apt-get install libboost-all-dev<br>sudo apt-get install libeigen3-dev</p></blockquote><p>详细内容可参考ORB_SLAM提供的README.md文档</p><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h3><h4 id="1-源码下载"><a href="#1-源码下载" class="headerlink" title="1.源码下载"></a>1.源码下载</h4><p>访问<a href="https://github.com/raulmur/ORB_SLAM">ORB_SLAM在github上的地址</a>下载源码。<br>或者在终端执行如下命令：</p><blockquote><p>git clone <a href="https://github.com/raulmur/ORB_SLAM.git">https://github.com/raulmur/ORB_SLAM.git</a> ORB_SLAM</p></blockquote><h4 id="2-添加环境变量"><a href="#2-添加环境变量" class="headerlink" title="2.添加环境变量"></a>2.添加环境变量</h4><p>将克隆ORB_SLAM的路径添加到ROS_PACKAGE_PATH环境变量。为此，请修改.bashrc并在底部添加以下行（替换PATH_TO_PARENT_OF_ORB_SLAM）</p><blockquote><p>export ROS_PACKAGE_PATH&#x3D;${ROS_PACKAGE_PATH}:PATH_TO_PARENT_OF_ORB_SLAM</p></blockquote><p>例如：如果ORB_SLAM文件夹在主文件夹中则将PATH_TO_PARENT_OF_ORB_SLAM替换为~&#x2F;ORB_SLAM</p><h4 id="3-编译g2o和DBoW2库"><a href="#3-编译g2o和DBoW2库" class="headerlink" title="3.编译g2o和DBoW2库"></a>3.编译g2o和DBoW2库</h4><p>分别进入到Thirdparty&#x2F;g2o&#x2F;和Thirdparty&#x2F;DBoW2&#x2F;目录下执行如下命令：</p><blockquote><p> mkdir build<br> cd build<br> cmake .. -DCMAKE_BUILD_TYPE&#x3D;Release<br> make</p></blockquote><h4 id="4-编译ORB-SLAM"><a href="#4-编译ORB-SLAM" class="headerlink" title="4.编译ORB_SLAM"></a>4.编译ORB_SLAM</h4><p>退回到ORB_SLAM&#x2F;目录下执行如下命令</p><blockquote><p> mkdir build<br> cd build<br> cmake .. -DCMAKE_BUILD_TYPE&#x3D;Release<br> make</p></blockquote><h2 id="编译ORB-SLAM报错处理"><a href="#编译ORB-SLAM报错处理" class="headerlink" title="编译ORB_SLAM报错处理"></a>编译ORB_SLAM报错处理</h2><h3 id="1-缺少opencv2"><a href="#1-缺少opencv2" class="headerlink" title="1.缺少opencv2"></a>1.缺少opencv2</h3><p>报错如下图所示<br><img src="https://img-blog.csdnimg.cn/20210219094426398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="缺少opencv2"><br>解决方法：删除manifest.xml文件中的&lt; depend package&#x3D;“opencv2”&#x2F; &gt; 行，如下图所示</p><p><img src="https://img-blog.csdnimg.cn/20210219094558784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="修改manifest.xml"></p><h3 id="2-缺少头文件"><a href="#2-缺少头文件" class="headerlink" title="2.缺少头文件"></a>2.缺少头文件</h3><p>出现类似如下错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> In member function ‘<span class="hljs-type">void</span> ORB_SLAM::ORBextractor::<span class="hljs-built_in">ComputeKeyPoints</span>(std::vector&lt;std::vectorcv::KeyPoint &gt;&amp;)’:<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc:<span class="hljs-number">607</span>:<span class="hljs-number">63</span>: error: ‘FAST’ <span class="hljs-function">was <span class="hljs-keyword">not</span> declared in <span class="hljs-keyword">this</span> scope</span><br><span class="hljs-function"><span class="hljs-title">FAST</span><span class="hljs-params">(cellImage,cellKeyPoints[i][j],fastTh,<span class="hljs-literal">true</span>)</span></span>;<br>^<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc:<span class="hljs-number">616</span>:<span class="hljs-number">34</span>: error: ‘ORB’ <span class="hljs-function">has <span class="hljs-keyword">not</span> been declared</span><br><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">( scoreType == ORB::HARRIS_SCORE )</span></span><br><span class="hljs-function">^</span><br><span class="hljs-function">/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc:<span class="hljs-number">683</span>:<span class="hljs-number">17</span>: error: ‘KeyPointsFilter’ has not been declared</span><br><span class="hljs-function">KeyPointsFilter::retainBest(keysCell,nToRetain[i][j]);</span><br>^<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc:<span class="hljs-number">699</span>:<span class="hljs-number">13</span>: error: ‘KeyPointsFilter’ <span class="hljs-function">has <span class="hljs-keyword">not</span> been declared</span><br><span class="hljs-function"><span class="hljs-title">KeyPointsFilter::retainBest</span><span class="hljs-params">(keypoints,nDesiredFeatures)</span></span>;<br>^<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc: In member function ‘<span class="hljs-type">void</span> ORB_SLAM::ORBextractor::<span class="hljs-built_in">operator</span>()(cv::InputArray, cv::InputArray, std::vectorcv::KeyPoint&amp;, cv::OutputArray)’:<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc:<span class="hljs-number">760</span>:<span class="hljs-number">82</span>: error: ‘GaussianBlur’ <span class="hljs-function">was <span class="hljs-keyword">not</span> declared in <span class="hljs-keyword">this</span> scope</span><br><span class="hljs-function"><span class="hljs-title">GaussianBlur</span><span class="hljs-params">(workingMat, workingMat, Size(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>), <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, BORDER_REFLECT_101)</span></span>;<br>^<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc: In member function ‘<span class="hljs-type">void</span> ORB_SLAM::ORBextractor::<span class="hljs-built_in">ComputePyramid</span>(cv::Mat, cv::Mat)’:<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc:<span class="hljs-number">800</span>:<span class="hljs-number">78</span>: error: ‘INTER_LINEAR’ <span class="hljs-function">was <span class="hljs-keyword">not</span> declared in <span class="hljs-keyword">this</span> scope</span><br><span class="hljs-function"><span class="hljs-title">resize</span><span class="hljs-params">(mvImagePyramid[level<span class="hljs-number">-1</span>], mvImagePyramid[level], sz, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, INTER_LINEAR)</span></span>;<br>^<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc:<span class="hljs-number">800</span>:<span class="hljs-number">90</span>: error: ‘resize’ <span class="hljs-function">was <span class="hljs-keyword">not</span> declared in <span class="hljs-keyword">this</span> scope</span><br><span class="hljs-function"><span class="hljs-title">resize</span><span class="hljs-params">(mvImagePyramid[level<span class="hljs-number">-1</span>], mvImagePyramid[level], sz, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, INTER_LINEAR)</span></span>;<br>^<br>/home/jy/catkin_ws/src/ORB_SLAM-master/src/ORBextractor.cc:<span class="hljs-number">803</span>:<span class="hljs-number">80</span>: error: ‘INTER_NEAREST’ <span class="hljs-function">was <span class="hljs-keyword">not</span> declared in <span class="hljs-keyword">this</span> scope</span><br><span class="hljs-function"><span class="hljs-title">resize</span><span class="hljs-params">(mvMaskPyramid[level<span class="hljs-number">-1</span>], mvMaskPyramid[level], sz, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, INTER_NEAREST)</span></span>;<br>^<br>make[<span class="hljs-number">2</span>]: *** [CMakeFiles/ORB_SLAM-master.dir/src/ORBextractor.cc.o] 错误 <span class="hljs-number">1</span><br>make[<span class="hljs-number">1</span>]: *** [CMakeFiles/ORB_SLAM-master.dir/all] 错误 <span class="hljs-number">2</span><br>make: *** [all] 错误 <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>解决方法：添加缺少的头文件，我的出错是ORBextractor.cc文件，修改如下：</p><p><img src="https://img-blog.csdnimg.cn/20210219095104204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="添加头文件"></p><h3 id="3-Eigen3库的bug"><a href="#3-Eigen3库的bug" class="headerlink" title="3.Eigen3库的bug"></a>3.Eigen3库的bug</h3><p>如果出现如下报错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">/usr/local/include/eigen3/Eigen/src/Core/util/StaticAssert.h:<span class="hljs-number">32</span>:<span class="hljs-number">40</span>: error: <span class="hljs-type">static</span> assertion failed:<br>YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY<br> <span class="hljs-meta">#<span class="hljs-keyword">define</span> EIGEN_STATIC_ASSERT(X,MSG) static_assert(X,#MSG);</span><br></code></pre></td></tr></table></figure><p>解决方法：打开Thirdparty&#x2F;g2o&#x2F;g2o&#x2F;solvers&#x2F;linear_solver_eigen.h，将以下代码：</p><blockquote><p>typedef Eigen::PermutationMatrix&lt;Eigen::Dynamic, Eigen::Dynamic, SparseMatrix::Index&gt; PermutationMatrix;</p></blockquote><p>替换为：</p><blockquote><p>typedef Eigen::PermutationMatrix&lt;Eigen::Dynamic, Eigen::Dynamic, int&gt; PermutationMatrix;</p></blockquote><p>如下图所示：<br><img src="https://img-blog.csdnimg.cn/20210219100103228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="修改eigen"></p><h3 id="4-undefined-reference-to-symbol-‘-ZN5boost6system15system-categoryEv’"><a href="#4-undefined-reference-to-symbol-‘-ZN5boost6system15system-categoryEv’" class="headerlink" title="4.undefined reference to symbol ‘_ZN5boost6system15system_categoryEv’"></a>4.undefined reference to symbol ‘_ZN5boost6system15system_categoryEv’</h3><p>解决方法：如果出现此错误修改CMakeLists.txt文件如下所示：<br><img src="https://img-blog.csdnimg.cn/20210219100345756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="修改CMakeLists.txt"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>所有ORB_SLAM编译流程均参考ORB_SLAM提供的README.md文档，如有疑问可以详细阅读此文档，或者评论区指出。<br>参考文档：</p><blockquote><p><a href="https://github.com/raulmur/ORB_SLAM/blob/master/README.md">https://github.com/raulmur/ORB_SLAM/blob/master/README.md</a><br><a href="https://www.ngui.cc/51cto/show-23557.html">https://www.ngui.cc/51cto/show-23557.html</a><br><a href="https://blog.csdn.net/weixin_43849277/article/details/109061739">https://blog.csdn.net/weixin_43849277/article/details/109061739</a><br><a href="https://www.geek-share.com/detail/2764681691.html">https://www.geek-share.com/detail/2764681691.html</a><br><a href="https://blog.csdn.net/danmeng8068/article/details/83827245">https://blog.csdn.net/danmeng8068/article/details/83827245</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SLAM</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>彻底搞懂Java中的＞＞,＜＜,＞＞＞</title>
    <link href="/2022/11/18/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Java%E4%B8%AD%E7%9A%84%EF%BC%9E%EF%BC%9E-%EF%BC%9C%EF%BC%9C-%EF%BC%9E%EF%BC%9E%EF%BC%9E/"/>
    <url>/2022/11/18/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Java%E4%B8%AD%E7%9A%84%EF%BC%9E%EF%BC%9E-%EF%BC%9C%EF%BC%9C-%EF%BC%9E%EF%BC%9E%EF%BC%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先需要知道在Java基本数据类型中不存在无符号数，即全为有符号数，&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;分别表示算术右移，算术左移，逻辑右移(无符号右移)<br>对于了解原码，反码，补码的读者可以直接跳过“有符号数的表示”部分</p><h2 id="有符号数的表示（补充了解）"><a href="#有符号数的表示（补充了解）" class="headerlink" title="有符号数的表示（补充了解）"></a>有符号数的表示（补充了解）</h2><h3 id="1-原码"><a href="#1-原码" class="headerlink" title="1.原码"></a>1.原码</h3><p>最左边一位二进制表示这个数的符号： ”0“代表正，”1“代表负。后面是它的”有效数字“。</p><p>一个字节存储的有符号数原码，有127个正数；有127个负数和2个”0“。</p><p>‘正’0：0 000 0000；‘负’0：1 000 0000；</p><h3 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a>2. 反码</h3><p>用最高位‘0’表示符号为正，‘1’表示符号为负。符号位之后的二进制位用来存储这个数的有效数字：正数的有效数字不变，负数的有效数字取反。</p><p>1字节存储有符号数反码，有127个正数，127个负数和2个“0”，</p><p>“正”0：0 000 0000， “负”0：1 111 1111.</p><h3 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a>3. 补码</h3><p>补码表示法仍然用最高有效位（MSB）表示一个有符号数的符号，“1”表示符号为负，“0”表示符号为正。</p><p>其他二进制位数用来存储这个数的有效数字。正数的有效数字不变，负数的有效数字取反后最低位加1.</p><h2 id="算术右移，算术左移，逻辑右移"><a href="#算术右移，算术左移，逻辑右移" class="headerlink" title="算术右移，算术左移，逻辑右移"></a>算术右移，算术左移，逻辑右移</h2><h3 id="1-总述"><a href="#1-总述" class="headerlink" title="1. 总述"></a>1. 总述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;&gt;   :  算术右移，num &gt;&gt; <span class="hljs-number">1</span>,低位溢出,高位补符号位,在十进制数值上相当于num除以<span class="hljs-number">2</span><br>&lt;&lt;   :  算术左移，num &lt;&lt; <span class="hljs-number">1</span>,高位溢出,低位补<span class="hljs-number">0</span>,在十进制数值上相当于num乘以<span class="hljs-number">2</span><br>&gt;&gt;&gt;  :  逻辑右移，忽略符号位，空位都以<span class="hljs-number">0</span>补齐<br></code></pre></td></tr></table></figure><h3 id="2-逻辑右移详解"><a href="#2-逻辑右移详解" class="headerlink" title="2.逻辑右移详解"></a>2.逻辑右移详解</h3><p>我们知道在Java中Integer占用4个字节，32位，最高位为符号位。Java中的数值用补码表示。</p><h4 id="正数"><a href="#正数" class="headerlink" title="正数"></a>正数</h4><p>根据上节知识可知，正数的补码等于原码，此处以10为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">10</span>在Java中的二进制表示为：<span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">1010</span><br>现在进行逻辑右移: <span class="hljs-number">10</span>&gt;&gt;&gt;<span class="hljs-number">2</span><br>逻辑右移后的二进制表示为：   <span class="hljs-number">00</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0010</span>   (未补齐)<br>逻辑右移后的二进制表示为： <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0010</span>   (<span class="hljs-number">0</span>补齐)<br></code></pre></td></tr></table></figure><h3 id="负数"><a href="#负数" class="headerlink" title="负数"></a>负数</h3><p>此处以-10为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">10</span>在java中的二进制表示为：<span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">0110</span><br>现在进行逻辑右移:-<span class="hljs-number">10</span>&gt;&gt;&gt;<span class="hljs-number">2</span><br>逻辑右移后的二进制表示为：    <span class="hljs-number">11</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1101</span>  (未补齐)<br>逻辑右移后的二进制表示为：  <span class="hljs-number">0011</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1101</span>  (<span class="hljs-number">0</span>补齐)<br></code></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> -<span class="hljs-number">10</span>;<br><br>        <span class="hljs-comment">//本身二进制结果</span><br>        printInfo(num);<br><br>        <span class="hljs-comment">//右移2位后二进制结果</span><br>        printInfo(num&gt;&gt;<span class="hljs-number">2</span>);<br>        System.out.println(num&gt;&gt;<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//左移1位后二进制结果</span><br>        printInfo(num&lt;&lt;<span class="hljs-number">2</span>);<br>        System.out.println(num&lt;&lt;<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//逻辑右移(无符号右移)1位后二进制结果</span><br>        printInfo(num&gt;&gt;&gt;<span class="hljs-number">2</span>);<br>        System.out.println(num&gt;&gt;&gt;<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//转二进制</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>        System.out.println(Integer.toBinaryString(num));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>读者可以自行修改测试。</p>]]></content>
    
    
    <categories>
      
      <category>Summarize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顺序表学习总结</title>
    <link href="/2022/11/17/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2022/11/17/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>顺序表，全名顺序存储结构，是<a href="https://blog.csdn.net/h2763246823/article/details/108021474">线性表</a>中的一种。</p><p>顺序表遵循线性表的存储逻辑关系为“一对一”的数据的特点。同时，顺序表对数据的物理存储结构也有特殊的要求：存储数据前需要申请一块足够大的物理空间，数据依次存入空间中，不留间隙。</p><p>例如，使用顺序表存储集合{1，2，3，4，5}，数据的最终存储状态如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200818202543171.png#pic_center" alt="顺序存储结构示意图"><br>理解顺序表的存储结构时，可以参考数组的存储结构。</p><h2 id="顺序表的建立"><a href="#顺序表的建立" class="headerlink" title="顺序表的建立"></a>顺序表的建立</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="定义数据表"><a href="#定义数据表" class="headerlink" title="定义数据表"></a>定义数据表</h4><p>首先，我们需要明确顺序表的建立所需的组成部分。</p><pre><code class=" mermaid">graph LRA(顺序表)--&gt;B(一段连续的物理空间)A--&gt; C(保存顺序表中元素个数的length,当前长度)A--&gt; D(保存顺序表最大存储元素个数的size,存储容量)</code></pre><p><strong>注</strong>：</p><ol><li>囊括length 和 size 是为了方便后期使用表中的数据</li><li>正常情况下，size要大于length</li></ol><p><strong>步骤</strong>：</p><ol><li>声明一个长度不确定的数组,也叫“动态数组”</li><li>声明一个length保存顺序表的长度</li><li>声明一个size保存顺序表分配的存储容量</li></ol><h4 id="初始化顺序表"><a href="#初始化顺序表" class="headerlink" title="初始化顺序表"></a>初始化顺序表</h4><p><strong>步骤</strong>：</p><ol><li>申请足够大小的物理空间</li><li>分别给size和length赋初值</li></ol><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>明确理论之后，我们就开始建立一个顺序表。<br>注：此处我采用C++模板编写</p><h4 id="定义顺序表"><a href="#定义顺序表" class="headerlink" title="定义顺序表"></a>定义顺序表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span> &#123;<br><span class="hljs-keyword">private</span>:<br>T* head;<span class="hljs-comment">//声明一个长度不确定的数组,也叫“动态数组”</span><br><span class="hljs-type">int</span> length;<span class="hljs-comment">//声明一个length保存顺序表的长度</span><br><span class="hljs-type">int</span> size;<span class="hljs-comment">//声明一个size保存顺序表分配的存储容量</span><br><span class="hljs-comment">//顺序表的一些常规操作声明，目前可以不关注</span><br><span class="hljs-comment">//只是大致的功能，自己创建时可以自行修改。</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Table</span>(<span class="hljs-type">int</span> size);<span class="hljs-comment">//顺序表的初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(T value)</span></span>;<span class="hljs-comment">//尾部添加数据</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(T value, <span class="hljs-type">int</span> pos)</span></span>; <span class="hljs-comment">//中间插入数据</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(T value)</span></span>;<span class="hljs-comment">//删除指定数据</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(T value, <span class="hljs-type">int</span> pos)</span></span>;<span class="hljs-comment">//改变指定位置的数据</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//显示表中全部数据</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(T value)</span></span>;<span class="hljs-comment">//查询数据</span><br>T <span class="hljs-keyword">operator</span>[](<span class="hljs-type">int</span> i); <span class="hljs-comment">//[]操作符重载</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="初始化顺序表-1"><a href="#初始化顺序表-1" class="headerlink" title="初始化顺序表"></a>初始化顺序表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>Table&lt;T&gt;::<span class="hljs-built_in">Table</span>(<span class="hljs-type">int</span> size) &#123;<br>head = <span class="hljs-keyword">new</span> T[size];<span class="hljs-comment">//动态申请存储空间</span><br>length = <span class="hljs-number">0</span>;<span class="hljs-comment">//空表的长度初始化为0</span><br><span class="hljs-keyword">this</span>-&gt;size = size;<span class="hljs-comment">//空表的存储容量为size</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序表的使用"><a href="#顺序表的使用" class="headerlink" title="顺序表的使用"></a>顺序表的使用</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p><strong>步骤</strong>：</p><ol><li>判断是否需要扩容，需要则扩容，size+1</li><li>将数据存入表中下标为length的位置，length+1</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Table&lt;T&gt;::<span class="hljs-built_in">add</span>(T values) &#123;<br><span class="hljs-keyword">if</span> (length == size) &#123;<br>T* temp = <span class="hljs-keyword">new</span> T[size + <span class="hljs-number">1</span>];<br><span class="hljs-comment">//注意对head中的数据进行保存</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>temp[i] = head[i];<br>&#125;<br><span class="hljs-keyword">delete</span>[] head;<br>head = temp;<br>size++;<br>&#125;<br><span class="hljs-type">int</span> i = length;<br>head[i] = values;<br>length++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p><strong>步骤</strong>：</p><ol><li>判断插入位置是否正确</li><li>判断是否需要扩容，需要则扩容，size+1</li><li>将要插入位置数据以及后续数据整体向后移动一个位置</li><li>将元素放到腾出来的位置上，length+1</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Table&lt;T&gt;::<span class="hljs-built_in">insert</span>(T values, <span class="hljs-type">int</span> pos) &#123;<br><span class="hljs-keyword">if</span> (pos&lt;<span class="hljs-number">1</span> || pos&gt;length + <span class="hljs-number">1</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;元素插入位置有误&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (length == size) &#123;<br>T* temp = <span class="hljs-keyword">new</span> T[size + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>temp[i] = head[i];<br>&#125;<br><span class="hljs-keyword">delete</span>[] head;<br>head = temp;<br>size++;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = length - <span class="hljs-number">1</span>; i &gt;= pos - <span class="hljs-number">1</span>; i--) &#123;<br>head[i + <span class="hljs-number">1</span>] = head[i];<br>&#125;<br>head[pos - <span class="hljs-number">1</span>] = values;<br>length++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p><strong>步骤</strong>：</p><ol><li>遍历找到目标数据的位置</li><li>将后续数据整体向前移动一个位置，length-1</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Table&lt;T&gt;::<span class="hljs-built_in">del</span>(T values) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br><span class="hljs-keyword">if</span> (head[i] == values) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; length; j++) &#123;<br>head[j - <span class="hljs-number">1</span>] = head[j];<br>&#125;<br>&#125;<br>&#125;<br>length--;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p><strong>步骤</strong>：</p><ol><li>遍历找到目标数据的位置</li><li>直接修改数据的值</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Table&lt;T&gt;::<span class="hljs-built_in">change</span>(T values, <span class="hljs-type">int</span> pos) &#123;<br>head[pos - <span class="hljs-number">1</span>] = values;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h4><p><strong>步骤</strong>：遍历输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Table&lt;T&gt;::<span class="hljs-built_in">show</span>() &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length;i++) &#123;<br>cout &lt;&lt; head[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>注： 可以使用多种算法实现查找，比如说二分查找算法，插值查找算法等。<br>这里使用 顺序查找算法<br><strong>步骤</strong>：遍历匹配目标数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">int</span> Table&lt;T&gt;::<span class="hljs-built_in">query</span>(T values) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br><span class="hljs-keyword">if</span> (head[i] == values) &#123;<br><span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Summarize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础语法总结</title>
    <link href="/2022/11/17/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/11/17/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念和数据类型"><a href="#基本概念和数据类型" class="headerlink" title="基本概念和数据类型"></a>基本概念和数据类型</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>  <strong>标识符（identifier）</strong></p><ol><li>用来表示的有效字符序列：类、变量、方法、数组、文件</li><li>命名规则：<ol><li>以字母、下划线或货币符号开始,后跟上述三种符号和数字(0-9)，字母不限于英文字母，货币符号除$,也可以是其他符号如￥。</li><li>不能使用其他特殊符号，如: +、@、&amp;、空格等。</li><li>不能与Java关键字同名</li><li>英文字母大小写敏感</li><li>长度无最大长度的限制  （建议 小于255个字符）</li></ol></li></ol><ul><li><strong>关键字</strong></li></ul><ol><li>Java语言本身必须使用的标识符</li><li>保留字是Java语言保留起来不允许用户使用的标识符</li><li>关键字（保留字）均用小写字母表示</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><strong>简单数据类型</strong></li></ul><ol><li>整数类型 (Integer)：  byte， short， int (默认) ，long　</li><li>浮点类型 (Floating)：float，double (默认)</li><li>字符类型 (Textual)： char　</li><li>布尔类型 (Logical)： boolean</li></ol><ul><li><strong>引用（复合）数据类型</strong><br>interface  数组  class  Vector  Date  HashMap … …<br>String           Unicode字符集16位   0~65535</li></ul><h2 id="简单数据类型优先级和转换"><a href="#简单数据类型优先级和转换" class="headerlink" title="简单数据类型优先级和转换"></a>简单数据类型优先级和转换</h2><ul><li><p><strong>简单类型数据的优先级</strong><br>byte,short,char  &lt;  int   &lt;  long  &lt; float  &lt; double   (由低到高）</p></li><li><p><strong>自动类型转换</strong><br>当两个简单数据类型的数据进行二元运算，要先将两个操作数转换成同一类型的数据，再进行运算。<br>自动类型转换规则：</p></li></ul><table><thead><tr><th align="center">操作数1类型</th><th align="center">操作数2类型</th><th align="center">类型转换</th></tr></thead><tbody><tr><td align="center">byte、short、char</td><td align="center">int</td><td align="center">int</td></tr><tr><td align="center">byte、short、char、int</td><td align="center">long</td><td align="center">long</td></tr><tr><td align="center">byte、short、char、int、long</td><td align="center">float</td><td align="center">float</td></tr><tr><td align="center">byte、short、char、int、long、float</td><td align="center">double</td><td align="center">double</td></tr></tbody></table><ul><li><strong>强制类型转换</strong><br>高优先级数据要转换成低优先级数据，需用强制类型转换。<br>强制类型转换一般存在数据精度损失。<br>强制类型转换格式：<br>目标类型目标变量名&#x3D;（目标类型）原变量名</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><strong>算术运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td></tr><tr><td align="center">-</td><td align="center">减</td></tr><tr><td align="center">*</td><td align="center">乘</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td></tr><tr><td align="center">%</td><td align="center">取余（取模）</td></tr><tr><td align="center">++</td><td align="center">自增</td></tr><tr><td align="center">–</td><td align="center">自减</td></tr></tbody></table><ul><li><strong>位运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与</td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td></tr><tr><td align="center">^</td><td align="center">异或</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">算术右移</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">逻辑右移</td></tr></tbody></table><p>注：对于&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;详解请参见<a href="https://blog.csdn.net/h2763246823/article/details/113813970">《彻底搞懂Java中的＞＞,＜＜,＞＞＞》</a></p><ul><li><strong>赋值运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">赋值</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加赋值</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减赋值</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘赋值</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除赋值</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取余（取模）赋值</td></tr></tbody></table><p>注：以+&#x3D;为例，a+&#x3D;1等价于a&#x3D;a+1。</p><ul><li><strong>关系运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于</td></tr></tbody></table><ul><li><strong>逻辑运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与</td></tr><tr><td align="center">&#96;</td><td align="center"></td></tr><tr><td align="center">!</td><td align="center">逻辑非</td></tr></tbody></table><ul><li><strong>条件运算符</strong><br>? : 运算符<br>格式：条件表达式 ？表达式1：表达式2<br>含义：如果&lt;条件表达式&gt;为真，则执行&lt;表达式1&gt;，否则，&lt;执行表达式2&gt;</li></ul><h2 id="input-x2F-output-statement"><a href="#input-x2F-output-statement" class="headerlink" title="input&#x2F;output statement"></a>input&#x2F;output statement</h2><ul><li><strong>input statement</strong><br>标准的输入设备是键盘库 java.util.Scanner (after JDK1.5)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导入库</span><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-comment">//import java.util.Scanner也行</span><br><br><span class="hljs-comment">//创建对象</span><br>Scanner Input=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><span class="hljs-comment">//调用方法</span><br>Input.nextInt()      <span class="hljs-comment">//read int data</span><br>Input.nextByte() <span class="hljs-comment">//read byte data</span><br></code></pre></td></tr></table></figure><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><ul><li><strong>分支语句</strong></li></ul><ol><li><strong>if</strong>语句</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-type">boolean</span>-expression)<br>statement;<br></code></pre></td></tr></table></figure><p>功能：当boolean-expression为“真”时，执行statement 。<br>2. <strong>if    else</strong>语句<br>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-type">boolean</span>-expression)<br> statement1；<br><span class="hljs-keyword">else</span> statement2；<br></code></pre></td></tr></table></figure><p>功能：当 boolean-expression为“真”时，执行statement1； 否则，执行statement 2。<br>3. <strong>switch</strong>语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123;<br>      <span class="hljs-keyword">case</span> value1：statement1;<br>           <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> value2：statement2;<br>           <span class="hljs-keyword">break</span>;<br>         ┆         ┆<br>      <span class="hljs-keyword">case</span> valueN：statementN;<br>           <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span> : defaultStatement;<br>&#125;<br></code></pre></td></tr></table></figure><p>功能：将expression的值与value1~valueN匹配，如果匹配则执行对应的statement，然后退出；否则                   执行defaultStatement。</p><ul><li><strong>循环语句</strong></li></ul><ol><li><strong>for</strong>语句</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(initialization; termination; iteration)&#123;　　　　<br><span class="hljs-comment">//body</span><br>&#125;<br></code></pre></td></tr></table></figure><p>功能：首先对循环条件（通常为i）进行initialization（初始化），然后执行termination（判断是否终止循环），然后执行循环体里的语句，最后执行iteration（循环条件i改变）</p><ol start="2"><li><strong>while</strong>语句</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">initialization<br><span class="hljs-title function_">while</span><span class="hljs-params">(termination)</span>&#123;　　　<br><span class="hljs-comment">//body;　      　</span><br>iteration;<br>&#125;<br></code></pre></td></tr></table></figure><p>功能：首先对循环条件（通常为i）进行initialization（初始化），然后执行termination（判断是否终止循环），然后执行循环体里的语句，最后执行iteration（循环条件i改变）</p><ol start="3"><li><strong>do while</strong>语句</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">initialization<br><span class="hljs-keyword">do</span>&#123;　　　<br><span class="hljs-comment">//body;　      　</span><br>iteration;<br>&#125;<span class="hljs-keyword">while</span>(termination);<br></code></pre></td></tr></table></figure><p>功能：首先对循环条件（通常为i）进行initialization（初始化），然后执行循环体里的语句，然后执行termination（判断是否终止循环），最后执行iteration（循环条件i改变）</p><p>注：<strong>while</strong>和<strong>do while</strong>语句的区别在于执行循环体和执行termination的顺序。</p><p>-<strong>跳转语句</strong></p><ol><li><p><strong>break</strong>语句<br>格式：break；<br>功能：终止当前循环体，转移到循环语句的下一条语句或标号处执行。</p></li><li><p><strong>continue</strong>语句<br> 格式：continue；<br> 功能： 跳过当前循环体的剩余语句，转移到下一次循环或标号处执行。</p></li><li><p><strong>return</strong>语句<br> 格式：return    [返回值]；<br>功能：终止方法或程序的执行，将控制返回调用者。</p></li></ol><h2 id="数组和向量"><a href="#数组和向量" class="headerlink" title="数组和向量"></a>数组和向量</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li><p><strong>一维数组的声明</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayType  arrayName[];<br><br>arrayType []arrayName;<br></code></pre></td></tr></table></figure></li><li><p><strong>一维数组的创建</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数组元素为简单数据类型</span><br><br><span class="hljs-comment">//静态初始化</span><br> arrayType  arrayName[]=&#123;element1[,element2…]&#125;;<br>arrayType  []arrayName=&#123;element1[,element2…]&#125;;<br><span class="hljs-comment">//例如</span><br><span class="hljs-type">int</span> [] samllPrimes=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>&#125;;<br><br><span class="hljs-comment">//动态初始化</span><br>arrayName= <span class="hljs-keyword">new</span> <span class="hljs-title class_">arrayType</span>[arrayLength];<br><span class="hljs-comment">//声明与初始化合并</span><br>arrayType arrayName= <span class="hljs-keyword">new</span> <span class="hljs-title class_">arrayType</span>[arrayLength];<br><span class="hljs-comment">//例如</span><br><span class="hljs-type">int</span> arr[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>]<br><br><span class="hljs-comment">//数组元素为复合数据类型</span><br><br><span class="hljs-comment">//创建数组元素</span><br>arrayName= <span class="hljs-keyword">new</span> <span class="hljs-title class_">arrayType</span>[arrayLength];<br><span class="hljs-comment">//为数组元素开辟存储空间</span><br>arrayName[i]= <span class="hljs-keyword">new</span> <span class="hljs-title class_">arrayType</span>[paramList]<br><span class="hljs-comment">//例如</span><br>String  stringArray[];<br>   stringArray=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<br>   stringArray[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(″Welcome″);<br>   stringArray[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(″To″);<br>   stringArray[<span class="hljs-number">2</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(″Zhnejiang″);<br></code></pre></td></tr></table></figure></li><li><p><strong>数组操作</strong><br> 引用数组元素，下标从0开始<br> 数组复制<br>   使用系统类的方法 ( System.arraycopy )。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *sourceArray             被复制的数组的数组名</span><br><span class="hljs-comment">  *sourcePosition      被复制的数组的起始位置</span><br><span class="hljs-comment">  *destinationArray  新数组的数组名</span><br><span class="hljs-comment">  *destinationposition 新数组储存复制的数组的起始位置</span><br><span class="hljs-comment">  *numberOfEntriesToCopy 需要被复制的元素个数</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">//导入所需的库</span><br>  <span class="hljs-keyword">import</span> java.io.*;<br><br>System.arraycopy( sourceArray, sourcePosition,<br>destinationArray, destinationposition, numberOfEntriesToCopy)<br></code></pre></td></tr></table></figure></p></li></ol><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><ul><li>是 java.util 包中的一个类，实现了类似动态数组的功能。</li><li>向量与数组的重要区别之一就是 向量的容量是可变的</li></ul><ol><li>向量的容量：向量的存储空间大小</li><li>向量的长度：线路的实际元素个数</li><li>向量的增量：向量的长度发生变化时，向量容量的增加量</li><li>增大容量时，向量的新容量取值：</li></ol><pre><code class=" mermaid">graph LRA[MAX] --&gt; B(向量的新长度)A --&gt; C(向量的原长度的2倍)C --&gt;增量等于0A --&gt; D(向量的原长度+容量增量)D --&gt; 增量大于0</code></pre><ul><li>声明格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Vector &lt;datatype&gt; variable_identifier;<br></code></pre></td></tr></table></figure><ul><li>构造方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">()</span><br><span class="hljs-comment">//创建空向量, 初始容量为 10 ,容量增量为 0 。</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span><br><span class="hljs-comment">//创建空向量, 初始容量为capacity, 容量增量为 0 。</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span><br><span class="hljs-comment">//创建空向量, 初始容量为 initialCapacity，容量增量为 capacityIncrement。</span><br></code></pre></td></tr></table></figure></li><li>添加元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Element obj)</span><br><span class="hljs-comment">//把element组件加到向量末尾，同时大小加1，向量容量比以前大1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addElement</span><span class="hljs-params">(Element obj)</span><br><span class="hljs-comment">//同上</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index,E element)</span><br><span class="hljs-comment">//把element组件加到指定处，此后的内容向后移动1 个单位。 注意与 insertElementAt 的不同参数。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertElementAt</span><span class="hljs-params">(E element,<span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//把element组件加到指定处，此后的内容向后移动1个单位</span><br></code></pre></td></tr></table></figure><ul><li>修改元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span><br><span class="hljs-comment">//用指定元素替换此向量中指定位置的元素。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setElementAt</span><span class="hljs-params">(E element,<span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//将此向量的指定索引处的组件设置为指定对象。</span><br></code></pre></td></tr></table></figure><ul><li>删除元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>    <span class="hljs-title function_">clear</span><span class="hljs-params">()</span><br><span class="hljs-comment">//Removes all of the elements from this Vector.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>   <span class="hljs-title function_">removeAllElement</span><span class="hljs-params">()</span><br><span class="hljs-comment">//Removes all components from this vector and sets its size to zero.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index )</span><br><span class="hljs-comment">//Removes the element at the specified position in this Vector.    Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the Vector.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeElementAt</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//Deletes the component at the specified index.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(object obj)</span><br><span class="hljs-comment">//Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null ? get(i)==null : o.equals(get(i))) (if such an element exists).</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(object obj)</span><br><span class="hljs-comment">//Removes the first (lowest-indexed) occurrence of the argument from this vector. If the object is found in this vector, each component in the vector with an index greater or equal to the object&#x27;s index is shifted downward to have an index one smaller than the value it had previously.</span><br></code></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(object obj)</span><br><span class="hljs-comment">//Returns true if this vector contains the specified element.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(object obj)</span><br><span class="hljs-comment">//Compares the specified Object with this Vector for equality.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexof</span><span class="hljs-params">(object obj)</span><br><span class="hljs-comment">//Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexof</span><span class="hljs-params">(object obj,<span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lastIndexof</span><span class="hljs-params">(object obj)</span><br><span class="hljs-comment">//Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lastIndexof</span><span class="hljs-params">(object obj,<span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">capacity</span><span class="hljs-params">()</span><br><span class="hljs-comment">//Returns the current capacity of this vector.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span><br><span class="hljs-comment">//Returns the number of components in this vector.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span><br><span class="hljs-comment">//Tests if this vector has no components.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSize</span><span class="hljs-params">(<span class="hljs-type">int</span> newSize)</span><br><span class="hljs-comment">//Sets the size of this vector.</span><br></code></pre></td></tr></table></figure><ul><li>可在向量的任意位置插入不同类型的对象，无需考虑对象的类型，也无需考虑向量的容量。</li><li>向量只能存储对象，不能直接存储简单数据类型。</li><li>适合向量的场合:<br>频繁进行对象的插入和删除工作<br>需要处理的对象数目不定<br>列表成员全部都是对象，或者可以方便的用对象表示<br>需要很快确定列表内是否存在某一特定对象，并且需要很快了解到对象的存放位置</li><li>适合数组的场合:<br>所需处理的对象数目大致可以确定<br>所需处理的是简单数据类型</li></ul>]]></content>
    
    
    <categories>
      
      <category>Summarize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表浅谈</title>
    <link href="/2022/11/17/%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%B5%85%E8%B0%88/"/>
    <url>/2022/11/17/%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%B5%85%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="线性表的概念"><a href="#线性表的概念" class="headerlink" title="线性表的概念"></a>线性表的概念</h2><p>线性表，全名为线性储存结构。储存方式可以理解为“把所有数据用一根线串起来，再储存到物理空间中”。<br><img src="https://img-blog.csdnimg.cn/20200815133635360.gif#pic_center" alt="数据的线性结构"></p><h2 id="储存数据的特点"><a href="#储存数据的特点" class="headerlink" title="储存数据的特点"></a>储存数据的特点</h2><ul><li>具有“一对一”逻辑关系。</li><li>要求数据的数据类型必须一致。</li></ul><h2 id="线性表的分类"><a href="#线性表的分类" class="headerlink" title="线性表的分类"></a>线性表的分类</h2><p>线性表存储数据可分为<strong>顺序存储结构</strong>和<strong>链式存储结构</strong></p><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><p>将数据依次连续的存入一整块物理空间之中（简称顺序表），如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200815134201576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="数据集中存放"></p><h3 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h3><p>数据分散的存储在物理空间中，通过一根线保存着他们之间的逻辑关系（简称链表），如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200815134409696.png#pic_center" alt="数据分散存放"></p><h2 id="元素的前驱与后继"><a href="#元素的前驱与后继" class="headerlink" title="元素的前驱与后继"></a>元素的前驱与后继</h2><p>数据结构中，每个数据个体被称为“数据元素”（简称“元素”），每个元素都有前驱和后驱。</p><h3 id="前驱"><a href="#前驱" class="headerlink" title="前驱"></a>前驱</h3><ul><li>某一元素的左侧相邻元素称为“直接前驱”，位于此元素左侧的所有元素统称为“前驱元素”。</li></ul><h3 id="后继"><a href="#后继" class="headerlink" title="后继"></a>后继</h3><ul><li>某一元素的右侧相邻元素称为“直接后继”，位于此元素右侧的所有元素统称为“后继元素”。</li></ul><p> 例如下图中数据<br><img src="https://img-blog.csdnimg.cn/20200815135039516.gif#pic_center" alt="前驱与后继"><br>对于3，2是它的直接前驱，4是它的直接后继；1和2则是它的前驱元素，4和5则是它的后继元素。</p>]]></content>
    
    
    <categories>
      
      <category>Summarize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存对齐浅析</title>
    <link href="/2022/11/17/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E6%B5%85%E6%9E%90/"/>
    <url>/2022/11/17/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在了解内存对齐之前，我们先来做个简短的测试。<br>看看下面的代码输出的结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">test</span>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">char</span> y;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>test t;<br>cout&lt;&lt;<span class="hljs-built_in">sizeof</span>(t); <span class="hljs-comment">//输出结果是多少？</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你的答案是<strong>8</strong>，那么恭喜你答对了，不过相信很多人并不理解为什么是<strong>8</strong>，而不是<strong>5</strong>。按照正常思路，32位系统下，<strong>int</strong>占<strong>4</strong>个字节，<strong>char</strong>占<strong>1</strong>个字节，<strong>4+1&#x3D;5</strong>,所以<strong>t</strong>占<strong>5</strong>个字节，<strong>sizeof</strong>应该返回<strong>5</strong>，那为什么是<strong>8</strong>呢？<br>这就涉及到了文章的主题，<em><strong>内存对齐</strong></em>。</p><h2 id="内存对齐的原因"><a href="#内存对齐的原因" class="headerlink" title="内存对齐的原因"></a>内存对齐的原因</h2><p>原因主要分两部分，平台原因和性能原因。</p><h3 id="平台原因"><a href="#平台原因" class="headerlink" title="平台原因"></a>平台原因</h3><p>因为现代计算机中内存的最小单位是<strong>byte</strong>，所以从理论上讲似乎对任何类型的变量的访问可以从任何地址开始。<br>但是实际上有些硬件平台对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的首地址的值是<strong>某个数k（通常它为4或8）的倍数</strong> 。</p><h3 id="性能原因"><a href="#性能原因" class="headerlink" title="性能原因"></a>性能原因</h3><p>假如没有内存对齐机制，数据可以任意存放，现在一个<strong>int</strong>变量存放在从地址<strong>1</strong>开始的联系四个字节地址中，该处理器去取数据时，要先从<strong>0</strong>地址开始读取第一个<strong>4</strong>字节块,剔除不想要的字节（<strong>0</strong>地址）,然后从地址<strong>4</strong>开始读取下一个<strong>4</strong>字节块,同样剔除不要的数据（<strong>5，6，7</strong>地址）,最后留下的两块数据合并放入寄存器，这需要做很多工作。</p><h2 id="内存对齐规则"><a href="#内存对齐规则" class="headerlink" title="内存对齐规则"></a>内存对齐规则</h2><blockquote><p>每个特定平台上的编译器都有自己的默认“<strong>对齐系数</strong>”(也叫<strong>对齐模数</strong>)。程序员可以通过预编译命令#<strong>pragma pack(n)，n&#x3D;1,2,4,8,16</strong>来改变这一系数，其中的<strong>n</strong>就是你要指定的“<strong>对齐系数</strong>”。</p></blockquote><p>有效对其值：是给定值#pragma pack(n)和结构体中<strong>最长数据类型长度中较小的</strong>那个。有效对齐值也叫<strong>对齐单位</strong>。</p><h3 id="对齐规则"><a href="#对齐规则" class="headerlink" title="对齐规则"></a>对齐规则</h3><h4 id="1、数据成员对齐规则"><a href="#1、数据成员对齐规则" class="headerlink" title="1、数据成员对齐规则"></a>1、数据成员对齐规则</h4><blockquote><p><strong>结构(struct)</strong>(或<strong>联合(union)</strong>)的数据成员，第一个数据成员放在<strong>offset</strong>为<strong>0</strong>的地方，以后每个数据成员的对齐按照#pragma<br>pack指定的数值和这个数据成员自身长度中，<strong>比较小</strong>的那个进行。</p></blockquote><h4 id="2、结构-或联合-的整体对齐规则"><a href="#2、结构-或联合-的整体对齐规则" class="headerlink" title="2、结构(或联合)的整体对齐规则"></a>2、结构(或联合)的整体对齐规则</h4><blockquote><p>在数据成员完成各自对齐之后，<strong>结构(或联合)本身也要进行对齐</strong>，对齐将按照#pragma<br>pack指定的数值和结构(或联合)最大数据成员长度中，<strong>比较小</strong>的那个进行。</p></blockquote><h4 id="3、结合1、2"><a href="#3、结合1、2" class="headerlink" title="3、结合1、2"></a>3、结合1、2</h4><blockquote><p>当#pragma pack的<strong>n</strong>值<strong>等于或超过</strong>所有数据成员长度的时候，这个<strong>n</strong>值的大小将不产生任何效果。</p></blockquote><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><span class="hljs-keyword">struct</span><br>&#123;<br>   <span class="hljs-type">char</span> c1;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> c2;<br>&#125;x1;<br><br><br><span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">char</span> c1;<br>    <span class="hljs-type">char</span> c2;<br>    <span class="hljs-type">int</span> i;<br>&#125;x2;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(x1) &lt;&lt; endl;  <span class="hljs-comment">// 输出12</span><br>    cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(x2) &lt;&lt; endl;  <span class="hljs-comment">// 输出8</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上测试都是在<strong>Win32</strong>环境下进行的，默认#<strong>pragma pack(4)<strong>，因此</strong>对齐单位</strong>为<strong>4</strong>。</p><p>以<strong>x1</strong>对象分析，首先使用<strong>对齐规则1</strong>，对<strong>x1</strong>的<strong>数据成员</strong>进行<strong>内存对齐</strong></p><p>sizeof(c1) &#x3D; 1 &lt; 4(<strong>对齐单位</strong>) 所以按照<strong>1</strong>字节对齐，占内存的第<strong>0</strong>单元。<br>sizeof(i) &#x3D; 4 &lt; &#x3D; 4(<strong>对齐单位</strong>) 相对于结构体首地址的偏移要为<strong>4</strong>的倍数，占内存的<strong>4,5,6,7</strong>单元。<br>sizeof(c2) &#x3D; 1 &lt; 4(<strong>对齐单位</strong>) 相对于结构体首地址的偏移要为<strong>4</strong>的倍数，占内存的第<strong>8</strong>单元。</p><p>接着，使用<strong>对齐规则2</strong>，对<strong>结构体整体</strong>进行<strong>内存对齐</strong>。</p><p><strong>x1</strong>中变量i占用内存最大占<strong>4</strong>字节，而有效对齐单位也为<strong>4</strong>字节，两者较小值就是<strong>4</strong>字节。因此<strong>整体也是按照4字节对齐</strong>。由<strong>对齐规则1</strong>得到<strong>x1</strong>占<strong>9</strong>个字节，此处再按照<strong>对齐规则2</strong>进行整体的<strong>4</strong>字节对齐，所以整个结构体占用<strong>12</strong>个字节。<img src="https://img-blog.csdnimg.cn/20200716221214388.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gyNzYzMjQ2ODIz,size_16,color_FFFFFF,t_70#pic_center" alt="x1内存布局"><br><strong>x2</strong>对象的分析也是类似。<br>先套用<strong>对齐规则1</strong>，<strong>c1</strong>和<strong>c2</strong>都是按照<strong>1</strong>个字节对齐，分别占用内存的第<strong>0</strong>和<strong>1</strong>单元，<strong>i</strong>相对于结构体首地址的偏移要为<strong>4</strong>的倍数，占内存的<strong>4,5,6,7</strong>单元。<br>再套用<strong>对齐规则2</strong>，因此<strong>整体也是按照4字节对齐</strong>。由<strong>对齐规则1</strong>得到<strong>x2</strong>占<strong>8</strong>个字节，此处再按照<strong>对齐规则2</strong>进行整体的<strong>4</strong>字节对齐，所以整个结构体占用<strong>8</strong>个字节。</p><blockquote><p>参考资料：<br><a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/9537460?fr=aladdin">内存对齐_百度百科</a><br><a href="https://zhuanlan.zhihu.com/p/30007037">C&#x2F;C++内存对齐详解 - 知乎</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Summarize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
